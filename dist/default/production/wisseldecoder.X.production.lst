

Microchip MPLAB XC8 Assembler V2.30 build 20200825195618 
                                                                                               Wed Jan 20 22:12:03 2021

Microchip MPLAB XC8 C Compiler v2.30 (Free license) build 20200825195618 Og1 
     1                           	processor	16F876A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	maintext,global,class=CODE,split=1,delta=2
    10                           	psect	text1,local,class=CODE,merge=1,delta=2
    11                           	psect	text2,local,class=CODE,merge=1,delta=2
    12                           	psect	text3,local,class=CODE,merge=1,delta=2
    13                           	psect	text4,local,class=CODE,merge=1,delta=2
    14                           	psect	text5,local,class=CODE,merge=1,delta=2
    15                           	psect	text6,local,class=CODE,merge=1,delta=2
    16                           	psect	text7,local,class=CODE,merge=1,delta=2
    17                           	psect	text8,local,class=CODE,merge=1,delta=2
    18                           	psect	text9,local,class=CODE,merge=1,delta=2
    19                           	psect	text10,local,class=CODE,merge=1,delta=2
    20                           	psect	text11,local,class=CODE,merge=1,delta=2
    21                           	psect	text12,local,class=CODE,merge=1,delta=2
    22                           	psect	text13,local,class=CODE,merge=1,delta=2
    23                           	psect	text14,local,class=CODE,merge=1,delta=2
    24                           	psect	intentry,global,class=CODE,delta=2
    25                           	psect	text15,local,class=CODE,merge=1,delta=2
    26                           	psect	text16,local,class=CODE,merge=1,delta=2
    27                           	psect	text17,local,class=CODE,merge=1,delta=2
    28                           	psect	text18,local,class=CODE,merge=1,delta=2
    29                           	dabs	1,0x7E,2
    30  0000                     
    31                           ; Version 2.20
    32                           ; Generated 12/02/2020 GMT
    33                           ; 
    34                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    35                           ; All rights reserved.
    36                           ; 
    37                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    38                           ; 
    39                           ; Redistribution and use in source and binary forms, with or without modification, are
    40                           ; permitted provided that the following conditions are met:
    41                           ; 
    42                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    43                           ;        conditions and the following disclaimer.
    44                           ; 
    45                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    46                           ;        of conditions and the following disclaimer in the documentation and/or other
    47                           ;        materials provided with the distribution.
    48                           ; 
    49                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    50                           ;        software without specific prior written permission.
    51                           ; 
    52                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    53                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    54                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    55                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    56                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    57                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    58                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    59                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    60                           ; 
    61                           ; 
    62                           ; Code-generator required, PIC16F876A Definitions
    63                           ; 
    64                           ; SFR Addresses
    65  0000                     	;# 
    66  0001                     	;# 
    67  0002                     	;# 
    68  0003                     	;# 
    69  0004                     	;# 
    70  0005                     	;# 
    71  0006                     	;# 
    72  0007                     	;# 
    73  000A                     	;# 
    74  000B                     	;# 
    75  000C                     	;# 
    76  000D                     	;# 
    77  000E                     	;# 
    78  000E                     	;# 
    79  000F                     	;# 
    80  0010                     	;# 
    81  0011                     	;# 
    82  0012                     	;# 
    83  0013                     	;# 
    84  0014                     	;# 
    85  0015                     	;# 
    86  0015                     	;# 
    87  0016                     	;# 
    88  0017                     	;# 
    89  0018                     	;# 
    90  0019                     	;# 
    91  001A                     	;# 
    92  001B                     	;# 
    93  001B                     	;# 
    94  001C                     	;# 
    95  001D                     	;# 
    96  001E                     	;# 
    97  001F                     	;# 
    98  0081                     	;# 
    99  0085                     	;# 
   100  0086                     	;# 
   101  0087                     	;# 
   102  008C                     	;# 
   103  008D                     	;# 
   104  008E                     	;# 
   105  0091                     	;# 
   106  0092                     	;# 
   107  0093                     	;# 
   108  0094                     	;# 
   109  0098                     	;# 
   110  0099                     	;# 
   111  009C                     	;# 
   112  009D                     	;# 
   113  009E                     	;# 
   114  009F                     	;# 
   115  010C                     	;# 
   116  010D                     	;# 
   117  010E                     	;# 
   118  010F                     	;# 
   119  018C                     	;# 
   120  018D                     	;# 
   121  0000                     	;# 
   122  0001                     	;# 
   123  0002                     	;# 
   124  0003                     	;# 
   125  0004                     	;# 
   126  0005                     	;# 
   127  0006                     	;# 
   128  0007                     	;# 
   129  000A                     	;# 
   130  000B                     	;# 
   131  000C                     	;# 
   132  000D                     	;# 
   133  000E                     	;# 
   134  000E                     	;# 
   135  000F                     	;# 
   136  0010                     	;# 
   137  0011                     	;# 
   138  0012                     	;# 
   139  0013                     	;# 
   140  0014                     	;# 
   141  0015                     	;# 
   142  0015                     	;# 
   143  0016                     	;# 
   144  0017                     	;# 
   145  0018                     	;# 
   146  0019                     	;# 
   147  001A                     	;# 
   148  001B                     	;# 
   149  001B                     	;# 
   150  001C                     	;# 
   151  001D                     	;# 
   152  001E                     	;# 
   153  001F                     	;# 
   154  0081                     	;# 
   155  0085                     	;# 
   156  0086                     	;# 
   157  0087                     	;# 
   158  008C                     	;# 
   159  008D                     	;# 
   160  008E                     	;# 
   161  0091                     	;# 
   162  0092                     	;# 
   163  0093                     	;# 
   164  0094                     	;# 
   165  0098                     	;# 
   166  0099                     	;# 
   167  009C                     	;# 
   168  009D                     	;# 
   169  009E                     	;# 
   170  009F                     	;# 
   171  010C                     	;# 
   172  010D                     	;# 
   173  010E                     	;# 
   174  010F                     	;# 
   175  018C                     	;# 
   176  018D                     	;# 
   177  0000                     	;# 
   178  0001                     	;# 
   179  0002                     	;# 
   180  0003                     	;# 
   181  0004                     	;# 
   182  0005                     	;# 
   183  0006                     	;# 
   184  0007                     	;# 
   185  000A                     	;# 
   186  000B                     	;# 
   187  000C                     	;# 
   188  000D                     	;# 
   189  000E                     	;# 
   190  000E                     	;# 
   191  000F                     	;# 
   192  0010                     	;# 
   193  0011                     	;# 
   194  0012                     	;# 
   195  0013                     	;# 
   196  0014                     	;# 
   197  0015                     	;# 
   198  0015                     	;# 
   199  0016                     	;# 
   200  0017                     	;# 
   201  0018                     	;# 
   202  0019                     	;# 
   203  001A                     	;# 
   204  001B                     	;# 
   205  001B                     	;# 
   206  001C                     	;# 
   207  001D                     	;# 
   208  001E                     	;# 
   209  001F                     	;# 
   210  0081                     	;# 
   211  0085                     	;# 
   212  0086                     	;# 
   213  0087                     	;# 
   214  008C                     	;# 
   215  008D                     	;# 
   216  008E                     	;# 
   217  0091                     	;# 
   218  0092                     	;# 
   219  0093                     	;# 
   220  0094                     	;# 
   221  0098                     	;# 
   222  0099                     	;# 
   223  009C                     	;# 
   224  009D                     	;# 
   225  009E                     	;# 
   226  009F                     	;# 
   227  010C                     	;# 
   228  010D                     	;# 
   229  010E                     	;# 
   230  010F                     	;# 
   231  018C                     	;# 
   232  018D                     	;# 
   233  0000                     	;# 
   234  0001                     	;# 
   235  0002                     	;# 
   236  0003                     	;# 
   237  0004                     	;# 
   238  0005                     	;# 
   239  0006                     	;# 
   240  0007                     	;# 
   241  000A                     	;# 
   242  000B                     	;# 
   243  000C                     	;# 
   244  000D                     	;# 
   245  000E                     	;# 
   246  000E                     	;# 
   247  000F                     	;# 
   248  0010                     	;# 
   249  0011                     	;# 
   250  0012                     	;# 
   251  0013                     	;# 
   252  0014                     	;# 
   253  0015                     	;# 
   254  0015                     	;# 
   255  0016                     	;# 
   256  0017                     	;# 
   257  0018                     	;# 
   258  0019                     	;# 
   259  001A                     	;# 
   260  001B                     	;# 
   261  001B                     	;# 
   262  001C                     	;# 
   263  001D                     	;# 
   264  001E                     	;# 
   265  001F                     	;# 
   266  0081                     	;# 
   267  0085                     	;# 
   268  0086                     	;# 
   269  0087                     	;# 
   270  008C                     	;# 
   271  008D                     	;# 
   272  008E                     	;# 
   273  0091                     	;# 
   274  0092                     	;# 
   275  0093                     	;# 
   276  0094                     	;# 
   277  0098                     	;# 
   278  0099                     	;# 
   279  009C                     	;# 
   280  009D                     	;# 
   281  009E                     	;# 
   282  009F                     	;# 
   283  010C                     	;# 
   284  010D                     	;# 
   285  010E                     	;# 
   286  010F                     	;# 
   287  018C                     	;# 
   288  018D                     	;# 
   289  0000                     	;# 
   290  0001                     	;# 
   291  0002                     	;# 
   292  0003                     	;# 
   293  0004                     	;# 
   294  0005                     	;# 
   295  0006                     	;# 
   296  0007                     	;# 
   297  000A                     	;# 
   298  000B                     	;# 
   299  000C                     	;# 
   300  000D                     	;# 
   301  000E                     	;# 
   302  000E                     	;# 
   303  000F                     	;# 
   304  0010                     	;# 
   305  0011                     	;# 
   306  0012                     	;# 
   307  0013                     	;# 
   308  0014                     	;# 
   309  0015                     	;# 
   310  0015                     	;# 
   311  0016                     	;# 
   312  0017                     	;# 
   313  0018                     	;# 
   314  0019                     	;# 
   315  001A                     	;# 
   316  001B                     	;# 
   317  001B                     	;# 
   318  001C                     	;# 
   319  001D                     	;# 
   320  001E                     	;# 
   321  001F                     	;# 
   322  0081                     	;# 
   323  0085                     	;# 
   324  0086                     	;# 
   325  0087                     	;# 
   326  008C                     	;# 
   327  008D                     	;# 
   328  008E                     	;# 
   329  0091                     	;# 
   330  0092                     	;# 
   331  0093                     	;# 
   332  0094                     	;# 
   333  0098                     	;# 
   334  0099                     	;# 
   335  009C                     	;# 
   336  009D                     	;# 
   337  009E                     	;# 
   338  009F                     	;# 
   339  010C                     	;# 
   340  010D                     	;# 
   341  010E                     	;# 
   342  010F                     	;# 
   343  018C                     	;# 
   344  018D                     	;# 
   345  0000                     	;# 
   346  0001                     	;# 
   347  0002                     	;# 
   348  0003                     	;# 
   349  0004                     	;# 
   350  0005                     	;# 
   351  0006                     	;# 
   352  0007                     	;# 
   353  000A                     	;# 
   354  000B                     	;# 
   355  000C                     	;# 
   356  000D                     	;# 
   357  000E                     	;# 
   358  000E                     	;# 
   359  000F                     	;# 
   360  0010                     	;# 
   361  0011                     	;# 
   362  0012                     	;# 
   363  0013                     	;# 
   364  0014                     	;# 
   365  0015                     	;# 
   366  0015                     	;# 
   367  0016                     	;# 
   368  0017                     	;# 
   369  0018                     	;# 
   370  0019                     	;# 
   371  001A                     	;# 
   372  001B                     	;# 
   373  001B                     	;# 
   374  001C                     	;# 
   375  001D                     	;# 
   376  001E                     	;# 
   377  001F                     	;# 
   378  0081                     	;# 
   379  0085                     	;# 
   380  0086                     	;# 
   381  0087                     	;# 
   382  008C                     	;# 
   383  008D                     	;# 
   384  008E                     	;# 
   385  0091                     	;# 
   386  0092                     	;# 
   387  0093                     	;# 
   388  0094                     	;# 
   389  0098                     	;# 
   390  0099                     	;# 
   391  009C                     	;# 
   392  009D                     	;# 
   393  009E                     	;# 
   394  009F                     	;# 
   395  010C                     	;# 
   396  010D                     	;# 
   397  010E                     	;# 
   398  010F                     	;# 
   399  018C                     	;# 
   400  018D                     	;# 
   401  000E                     _TMR1	set	14
   402  001D                     _CCP2CONbits	set	29
   403  000B                     _INTCONbits	set	11
   404  0010                     _T1CONbits	set	16
   405  000E                     _TMR1L	set	14
   406  000F                     _TMR1H	set	15
   407  000C                     _PIR1bits	set	12
   408  0005                     _PORTA	set	5
   409  000D                     _PIR2bits	set	13
   410  0068                     _CCP2IF	set	104
   411  008C                     _PIE1bits	set	140
   412                           
   413                           	psect	cinit
   414  000F                     start_initialization:	
   415                           ; #config settings
   416                           
   417  000F                     __initialization:
   418                           
   419                           ; Clear objects allocated to COMMON
   420  000F  01F8               	clrf	__pbssCOMMON& (0+127)
   421  0010  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
   422  0011  01FA               	clrf	(__pbssCOMMON+2)& (0+127)
   423  0012  01FB               	clrf	(__pbssCOMMON+3)& (0+127)
   424  0013  01FC               	clrf	(__pbssCOMMON+4)& (0+127)
   425  0014  01FD               	clrf	(__pbssCOMMON+5)& (0+127)
   426                           
   427                           ; Clear objects allocated to BANK0
   428  0015  1283               	bcf	3,5	;RP0=0, select bank0
   429  0016  1303               	bcf	3,6	;RP1=0, select bank0
   430  0017  01BE               	clrf	__pbssBANK0& (0+127)
   431  0018  01BF               	clrf	(__pbssBANK0+1)& (0+127)
   432  0019  01C0               	clrf	(__pbssBANK0+2)& (0+127)
   433  001A  01C1               	clrf	(__pbssBANK0+3)& (0+127)
   434  001B  01C2               	clrf	(__pbssBANK0+4)& (0+127)
   435  001C  01C3               	clrf	(__pbssBANK0+5)& (0+127)
   436  001D  01C4               	clrf	(__pbssBANK0+6)& (0+127)
   437  001E  01C5               	clrf	(__pbssBANK0+7)& (0+127)
   438  001F  01C6               	clrf	(__pbssBANK0+8)& (0+127)
   439  0020  01C7               	clrf	(__pbssBANK0+9)& (0+127)
   440  0021                     end_of_initialization:	
   441                           ;End of C runtime variable initialization code
   442                           
   443  0021                     __end_of__initialization:
   444  0021  0183               	clrf	3
   445  0022  120A  118A  28F4   	ljmp	_main	;jump to C main() function
   446                           
   447                           	psect	bssCOMMON
   448  0078                     __pbssCOMMON:
   449  0078                     _rawPacketLow:
   450  0078                     	ds	4
   451  007C                     _rawPacketHigh:
   452  007C                     	ds	2
   453                           
   454                           	psect	bssBANK0
   455  003E                     __pbssBANK0:
   456  003E                     _validRawPacket:
   457  003E                     	ds	4
   458  0042                     _dccPacketChecksum:
   459  0042                     	ds	1
   460  0043                     _dccPacketAddress:
   461  0043                     	ds	1
   462  0044                     _dccPacketData:
   463  0044                     	ds	1
   464  0045                     _checksum:
   465  0045                     	ds	1
   466  0046                     _data:
   467  0046                     	ds	1
   468  0047                     _adres:
   469  0047                     	ds	1
   470                           
   471                           	psect	cstackCOMMON
   472  0070                     __pcstackCOMMON:
   473  0070                     ?_tmr1Init:
   474  0070                     ?_CCP2Init:	
   475                           ; 1 bytes @ 0x0
   476                           
   477  0070                     ?_enableGlobalInterrupts:	
   478                           ; 1 bytes @ 0x0
   479                           
   480  0070                     ?_enablePeripheralInterrupts:	
   481                           ; 1 bytes @ 0x0
   482                           
   483  0070                     ?_disableTMR1Intterrupt:	
   484                           ; 1 bytes @ 0x0
   485                           
   486  0070                     ?_DCCbitDecode:	
   487                           ; 1 bytes @ 0x0
   488                           
   489  0070                     ?_tmr1Reload:	
   490                           ; 1 bytes @ 0x0
   491                           
   492  0070                     ?_DCCgetAddress:	
   493                           ; 1 bytes @ 0x0
   494                           
   495  0070                     ?_DCCgetData:	
   496                           ; 1 bytes @ 0x0
   497                           
   498  0070                     ?_DCCgetChecksum:	
   499                           ; 1 bytes @ 0x0
   500                           
   501  0070                     ?_tmr1On:	
   502                           ; 1 bytes @ 0x0
   503                           
   504  0070                     ?_enableTMR1Intterrupt:	
   505                           ; 1 bytes @ 0x0
   506                           
   507  0070                     ?_setup:	
   508                           ; 1 bytes @ 0x0
   509                           
   510  0070                     ?_my_isr_routine:	
   511                           ; 1 bytes @ 0x0
   512                           
   513  0070                     ?_main:	
   514                           ; 1 bytes @ 0x0
   515                           
   516  0070                     ?i1_tmr1Reload:	
   517                           ; 1 bytes @ 0x0
   518                           
   519  0070                     ??i1_tmr1Reload:	
   520                           ; 1 bytes @ 0x0
   521                           
   522  0070                     ?i1_enableTMR1Intterrupt:	
   523                           ; 1 bytes @ 0x0
   524                           
   525  0070                     ??i1_enableTMR1Intterrupt:	
   526                           ; 1 bytes @ 0x0
   527                           
   528  0070                     ?i1_disableTMR1Intterrupt:	
   529                           ; 1 bytes @ 0x0
   530                           
   531  0070                     ??i1_disableTMR1Intterrupt:	
   532                           ; 1 bytes @ 0x0
   533                           
   534  0070                     DCCbitDecode@TMR1Value:	
   535                           ; 1 bytes @ 0x0
   536                           
   537                           
   538                           ; 2 bytes @ 0x0
   539  0070                     	ds	2
   540  0072                     ??_DCCbitDecode:
   541                           
   542                           ; 1 bytes @ 0x2
   543  0072                     	ds	4
   544  0076                     ??_my_isr_routine:
   545                           
   546                           ; 1 bytes @ 0x6
   547  0076                     	ds	2
   548                           
   549                           	psect	cstackBANK0
   550  0020                     __pcstackBANK0:
   551  0020                     ??_tmr1Init:
   552  0020                     ??_CCP2Init:	
   553                           ; 1 bytes @ 0x0
   554                           
   555  0020                     ??_enableGlobalInterrupts:	
   556                           ; 1 bytes @ 0x0
   557                           
   558  0020                     ??_enablePeripheralInterrupts:	
   559                           ; 1 bytes @ 0x0
   560                           
   561  0020                     ??_disableTMR1Intterrupt:	
   562                           ; 1 bytes @ 0x0
   563                           
   564  0020                     ??_tmr1Reload:	
   565                           ; 1 bytes @ 0x0
   566                           
   567  0020                     ??_DCCgetAddress:	
   568                           ; 1 bytes @ 0x0
   569                           
   570  0020                     ??_DCCgetData:	
   571                           ; 1 bytes @ 0x0
   572                           
   573  0020                     ??_DCCgetChecksum:	
   574                           ; 1 bytes @ 0x0
   575                           
   576  0020                     ??_tmr1On:	
   577                           ; 1 bytes @ 0x0
   578                           
   579  0020                     ??_enableTMR1Intterrupt:	
   580                           ; 1 bytes @ 0x0
   581                           
   582  0020                     CCP2Init@mode:	
   583                           ; 1 bytes @ 0x0
   584                           
   585                           
   586                           ; 1 bytes @ 0x0
   587  0020                     	ds	1
   588  0021                     ??_setup:
   589                           
   590                           ; 1 bytes @ 0x1
   591  0021                     	ds	1
   592  0022                     DCCgetChecksum@ret:
   593                           
   594                           ; 1 bytes @ 0x2
   595  0022                     	ds	2
   596  0024                     DCCgetAddress@val:
   597                           
   598                           ; 4 bytes @ 0x4
   599  0024                     	ds	4
   600  0028                     DCCgetAddress@ret:
   601                           
   602                           ; 1 bytes @ 0x8
   603  0028                     	ds	1
   604  0029                     ?_DCCisRawPacketValid:
   605                           
   606                           ; 2 bytes @ 0x9
   607  0029                     	ds	2
   608  002B                     ??_DCCisRawPacketValid:
   609                           
   610                           ; 1 bytes @ 0xB
   611  002B                     	ds	8
   612  0033                     DCCisRawPacketValid@expect:
   613                           
   614                           ; 4 bytes @ 0x13
   615  0033                     	ds	4
   616  0037                     _DCCisRawPacketValid$307:
   617                           
   618                           ; 1 bytes @ 0x17
   619  0037                     	ds	1
   620  0038                     DCCisRawPacketValid@ret:
   621                           
   622                           ; 2 bytes @ 0x18
   623  0038                     	ds	2
   624  003A                     ??_main:
   625                           
   626                           ; 1 bytes @ 0x1A
   627  003A                     	ds	4
   628                           
   629                           	psect	maintext
   630  00F4                     __pmaintext:	
   631 ;;
   632 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
   633 ;;
   634 ;; *************** function _main *****************
   635 ;; Defined at:
   636 ;;		line 41 in file "main.c"
   637 ;; Parameters:    Size  Location     Type
   638 ;;		None
   639 ;; Auto vars:     Size  Location     Type
   640 ;;		None
   641 ;; Return value:  Size  Location     Type
   642 ;;                  1    wreg      void 
   643 ;; Registers used:
   644 ;;		wreg, status,2, status,0, pclath, cstack
   645 ;; Tracked objects:
   646 ;;		On entry : B00/0
   647 ;;		On exit  : 0/0
   648 ;;		Unchanged: 0/0
   649 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   650 ;;      Params:         0       0       0       0       0
   651 ;;      Locals:         0       0       0       0       0
   652 ;;      Temps:          0       4       0       0       0
   653 ;;      Totals:         0       4       0       0       0
   654 ;;Total ram usage:        4 bytes
   655 ;; Hardware stack levels required when called:    7
   656 ;; This function calls:
   657 ;;		_DCCgetAddress
   658 ;;		_DCCgetChecksum
   659 ;;		_DCCgetData
   660 ;;		_DCCisRawPacketValid
   661 ;;		_setup
   662 ;; This function is called by:
   663 ;;		Startup code after reset
   664 ;; This function uses a non-reentrant model
   665 ;;
   666                           
   667                           
   668                           ;psect for function _main
   669  00F4                     _main:
   670  00F4                     l1004:	
   671                           ;incstack = 0
   672                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   673                           
   674                           
   675                           ;main.c: 42:     setup();
   676  00F4  120A  118A  2186  120A  118A  	fcall	_setup
   677  00F9                     l50:	
   678                           ;main.c: 44:     while (1) {
   679                           
   680                           
   681                           ;main.c: 45:         if (DCCisRawPacketValid()) {
   682  00F9  120A  118A  2095  120A  118A  	fcall	_DCCisRawPacketValid
   683  00FE  1283               	bcf	3,5	;RP0=0, select bank0
   684  00FF  1303               	bcf	3,6	;RP1=0, select bank0
   685  0100  0829               	movf	?_DCCisRawPacketValid,w
   686  0101  042A               	iorwf	?_DCCisRawPacketValid+1,w
   687  0102  1903               	btfsc	3,2
   688  0103  2905               	goto	u211
   689  0104  2906               	goto	u210
   690  0105                     u211:
   691  0105  28F9               	goto	l50
   692  0106                     u210:
   693  0106                     l1006:
   694                           
   695                           ;main.c: 46:             adres = DCCgetAddress();
   696  0106  120A  118A  2141  120A  118A  	fcall	_DCCgetAddress
   697  010B  1283               	bcf	3,5	;RP0=0, select bank0
   698  010C  1303               	bcf	3,6	;RP1=0, select bank0
   699  010D  00BA               	movwf	??_main
   700  010E  083A               	movf	??_main,w
   701  010F  00C7               	movwf	_adres
   702  0110                     l1008:
   703                           
   704                           ;main.c: 47:             data = DCCgetData();
   705  0110  120A  118A  21E4  120A  118A  	fcall	_DCCgetData
   706  0115  1283               	bcf	3,5	;RP0=0, select bank0
   707  0116  1303               	bcf	3,6	;RP1=0, select bank0
   708  0117  00BA               	movwf	??_main
   709  0118  083A               	movf	??_main,w
   710  0119  00C6               	movwf	_data
   711  011A                     l1010:
   712                           
   713                           ;main.c: 48:             checksum = DCCgetChecksum();
   714  011A  120A  118A  21D0  120A  118A  	fcall	_DCCgetChecksum
   715  011F  1283               	bcf	3,5	;RP0=0, select bank0
   716  0120  1303               	bcf	3,6	;RP1=0, select bank0
   717  0121  00BA               	movwf	??_main
   718  0122  083A               	movf	??_main,w
   719  0123  00C5               	movwf	_checksum
   720  0124                     l1012:
   721                           
   722                           ;main.c: 50:             if (adres + data - checksum == 1) {
   723  0124  0847               	movf	_adres,w
   724  0125  0746               	addwf	_data,w
   725  0126  00BA               	movwf	??_main
   726  0127  01BB               	clrf	??_main+1
   727  0128  0DBB               	rlf	??_main+1,f
   728  0129  083B               	movf	??_main+1,w
   729  012A  00BD               	movwf	??_main+3
   730  012B  0845               	movf	_checksum,w
   731  012C  023A               	subwf	??_main,w
   732  012D  00BC               	movwf	??_main+2
   733  012E  1C03               	skipc
   734  012F  03BD               	decf	??_main+3,f
   735  0130  033C               	decf	??_main+2,w
   736  0131  043D               	iorwf	??_main+3,w
   737  0132  1D03               	btfss	3,2
   738  0133  2935               	goto	u221
   739  0134  2936               	goto	u220
   740  0135                     u221:
   741  0135  2939               	goto	l1016
   742  0136                     u220:
   743  0136                     l1014:
   744                           
   745                           ;main.c: 51:                 PORTA = 50;
   746  0136  3032               	movlw	50
   747  0137  0085               	movwf	5	;volatile
   748                           
   749                           ;main.c: 52:             } else {
   750  0138  28F9               	goto	l50
   751  0139                     l1016:
   752                           
   753                           ;main.c: 53:                 PORTA += 5;
   754  0139  3005               	movlw	5
   755  013A  00BA               	movwf	??_main
   756  013B  083A               	movf	??_main,w
   757  013C  0785               	addwf	5,f	;volatile
   758  013D  28F9               	goto	l50
   759  013E  120A  118A  280C   	ljmp	start
   760  0141                     __end_of_main:
   761                           
   762                           	psect	text1
   763  0186                     __ptext1:	
   764 ;; *************** function _setup *****************
   765 ;; Defined at:
   766 ;;		line 20 in file "main.c"
   767 ;; Parameters:    Size  Location     Type
   768 ;;		None
   769 ;; Auto vars:     Size  Location     Type
   770 ;;		None
   771 ;; Return value:  Size  Location     Type
   772 ;;                  1    wreg      void 
   773 ;; Registers used:
   774 ;;		wreg, status,2, status,0, pclath, cstack
   775 ;; Tracked objects:
   776 ;;		On entry : 0/0
   777 ;;		On exit  : 0/0
   778 ;;		Unchanged: 0/0
   779 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   780 ;;      Params:         0       0       0       0       0
   781 ;;      Locals:         0       0       0       0       0
   782 ;;      Temps:          0       0       0       0       0
   783 ;;      Totals:         0       0       0       0       0
   784 ;;Total ram usage:        0 bytes
   785 ;; Hardware stack levels used:    1
   786 ;; Hardware stack levels required when called:    6
   787 ;; This function calls:
   788 ;;		_CCP2Init
   789 ;;		_disableTMR1Intterrupt
   790 ;;		_enableGlobalInterrupts
   791 ;;		_enablePeripheralInterrupts
   792 ;;		_tmr1Init
   793 ;; This function is called by:
   794 ;;		_main
   795 ;; This function uses a non-reentrant model
   796 ;;
   797                           
   798                           
   799                           ;psect for function _setup
   800  0186                     _setup:
   801  0186                     l946:	
   802                           ;incstack = 0
   803                           ; Regs used in _setup: [wreg+status,2+status,0+pclath+cstack]
   804                           
   805                           
   806                           ;main.c: 21:     tmr1Init();
   807  0186  120A  118A  21C2  120A  118A  	fcall	_tmr1Init
   808  018B                     l948:
   809                           
   810                           ;main.c: 22:     CCP2Init(0b0101);
   811  018B  3005               	movlw	5
   812  018C  120A  118A  21DB  120A  118A  	fcall	_CCP2Init
   813  0191                     l950:
   814                           
   815                           ;main.c: 23:     enableGlobalInterrupts();
   816  0191  120A  118A  21FF  120A  118A  	fcall	_enableGlobalInterrupts
   817  0196                     l952:
   818                           
   819                           ;main.c: 24:     enablePeripheralInterrupts();
   820  0196  120A  118A  21FD  120A  118A  	fcall	_enablePeripheralInterrupts
   821  019B                     l954:
   822                           
   823                           ;main.c: 25:     disableTMR1Intterrupt();
   824  019B  120A  118A  21ED  120A  118A  	fcall	_disableTMR1Intterrupt
   825  01A0                     l956:
   826                           
   827                           ;main.c: 26:     PIR2bits.CCP2IF = 1;
   828  01A0  1283               	bcf	3,5	;RP0=0, select bank0
   829  01A1  1303               	bcf	3,6	;RP1=0, select bank0
   830  01A2  140D               	bsf	13,0	;volatile
   831  01A3                     l39:
   832  01A3  0008               	return
   833  01A4                     __end_of_setup:
   834                           
   835                           	psect	text2
   836  01C2                     __ptext2:	
   837 ;; *************** function _tmr1Init *****************
   838 ;; Defined at:
   839 ;;		line 13 in file "tmr1.c"
   840 ;; Parameters:    Size  Location     Type
   841 ;;		None
   842 ;; Auto vars:     Size  Location     Type
   843 ;;		None
   844 ;; Return value:  Size  Location     Type
   845 ;;                  1    wreg      void 
   846 ;; Registers used:
   847 ;;		status,2, status,0, pclath, cstack
   848 ;; Tracked objects:
   849 ;;		On entry : 0/0
   850 ;;		On exit  : 0/0
   851 ;;		Unchanged: 0/0
   852 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   853 ;;      Params:         0       0       0       0       0
   854 ;;      Locals:         0       0       0       0       0
   855 ;;      Temps:          0       0       0       0       0
   856 ;;      Totals:         0       0       0       0       0
   857 ;;Total ram usage:        0 bytes
   858 ;; Hardware stack levels used:    1
   859 ;; Hardware stack levels required when called:    5
   860 ;; This function calls:
   861 ;;		_tmr1On
   862 ;;		_tmr1Reload
   863 ;; This function is called by:
   864 ;;		_setup
   865 ;; This function uses a non-reentrant model
   866 ;;
   867                           
   868                           
   869                           ;psect for function _tmr1Init
   870  01C2                     _tmr1Init:
   871  01C2                     l912:	
   872                           ;incstack = 0
   873                           ; Regs used in _tmr1Init: [status,2+status,0+pclath+cstack]
   874                           
   875                           
   876                           ;tmr1.c: 14:   PIR1bits.TMR1IF = 0;
   877  01C2  1283               	bcf	3,5	;RP0=0, select bank0
   878  01C3  1303               	bcf	3,6	;RP1=0, select bank0
   879  01C4  100C               	bcf	12,0	;volatile
   880  01C5                     l914:
   881                           
   882                           ;tmr1.c: 15:   tmr1Reload();
   883  01C5  120A  118A  21A4  120A  118A  	fcall	_tmr1Reload
   884                           
   885                           ;tmr1.c: 16:   tmr1On();
   886  01CA  120A  118A  21F1  120A  118A  	fcall	_tmr1On
   887  01CF                     l77:
   888  01CF  0008               	return
   889  01D0                     __end_of_tmr1Init:
   890                           
   891                           	psect	text3
   892  01A4                     __ptext3:	
   893 ;; *************** function _tmr1Reload *****************
   894 ;; Defined at:
   895 ;;		line 19 in file "tmr1.c"
   896 ;; Parameters:    Size  Location     Type
   897 ;;		None
   898 ;; Auto vars:     Size  Location     Type
   899 ;;		None
   900 ;; Return value:  Size  Location     Type
   901 ;;                  1    wreg      void 
   902 ;; Registers used:
   903 ;;		status,2, status,0, pclath, cstack
   904 ;; Tracked objects:
   905 ;;		On entry : 0/0
   906 ;;		On exit  : 0/0
   907 ;;		Unchanged: 0/0
   908 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   909 ;;      Params:         0       0       0       0       0
   910 ;;      Locals:         0       0       0       0       0
   911 ;;      Temps:          0       0       0       0       0
   912 ;;      Totals:         0       0       0       0       0
   913 ;;Total ram usage:        0 bytes
   914 ;; Hardware stack levels used:    1
   915 ;; Hardware stack levels required when called:    4
   916 ;; This function calls:
   917 ;;		_disableTMR1Intterrupt
   918 ;;		_enableTMR1Intterrupt
   919 ;; This function is called by:
   920 ;;		_tmr1Init
   921 ;; This function uses a non-reentrant model
   922 ;;
   923                           
   924                           
   925                           ;psect for function _tmr1Reload
   926  01A4                     _tmr1Reload:
   927  01A4                     l904:	
   928                           ;incstack = 0
   929                           ; Regs used in _tmr1Reload: [status,2+status,0+pclath+cstack]
   930                           
   931                           
   932                           ;tmr1.c: 20:     disableTMR1Intterrupt();
   933  01A4  120A  118A  21ED  120A  118A  	fcall	_disableTMR1Intterrupt
   934  01A9                     l906:
   935                           
   936                           ;tmr1.c: 21:     TMR1H = 0;
   937  01A9  1283               	bcf	3,5	;RP0=0, select bank0
   938  01AA  1303               	bcf	3,6	;RP1=0, select bank0
   939  01AB  018F               	clrf	15	;volatile
   940  01AC                     l908:
   941                           
   942                           ;tmr1.c: 22:     TMR1L = 0;
   943  01AC  018E               	clrf	14	;volatile
   944                           
   945                           ;tmr1.c: 23:     enableTMR1Intterrupt();
   946  01AD  120A  118A  21E9  120A  118A  	fcall	_enableTMR1Intterrupt
   947  01B2                     l80:
   948  01B2  0008               	return
   949  01B3                     __end_of_tmr1Reload:
   950                           
   951                           	psect	text4
   952  01E9                     __ptext4:	
   953 ;; *************** function _enableTMR1Intterrupt *****************
   954 ;; Defined at:
   955 ;;		line 26 in file "tmr1.c"
   956 ;; Parameters:    Size  Location     Type
   957 ;;		None
   958 ;; Auto vars:     Size  Location     Type
   959 ;;		None
   960 ;; Return value:  Size  Location     Type
   961 ;;                  1    wreg      void 
   962 ;; Registers used:
   963 ;;		None
   964 ;; Tracked objects:
   965 ;;		On entry : 0/0
   966 ;;		On exit  : 0/0
   967 ;;		Unchanged: 0/0
   968 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   969 ;;      Params:         0       0       0       0       0
   970 ;;      Locals:         0       0       0       0       0
   971 ;;      Temps:          0       0       0       0       0
   972 ;;      Totals:         0       0       0       0       0
   973 ;;Total ram usage:        0 bytes
   974 ;; Hardware stack levels used:    1
   975 ;; Hardware stack levels required when called:    3
   976 ;; This function calls:
   977 ;;		Nothing
   978 ;; This function is called by:
   979 ;;		_tmr1Reload
   980 ;; This function uses a non-reentrant model
   981 ;;
   982                           
   983                           
   984                           ;psect for function _enableTMR1Intterrupt
   985  01E9                     _enableTMR1Intterrupt:
   986  01E9                     l902:	
   987                           ;incstack = 0
   988                           ; Regs used in _enableTMR1Intterrupt: []
   989                           
   990                           
   991                           ;tmr1.c: 27:     PIE1bits.TMR1IE = 1;
   992  01E9  1683               	bsf	3,5	;RP0=1, select bank1
   993  01EA  1303               	bcf	3,6	;RP1=0, select bank1
   994  01EB  140C               	bsf	12,0	;volatile
   995  01EC                     l83:
   996  01EC  0008               	return
   997  01ED                     __end_of_enableTMR1Intterrupt:
   998                           
   999                           	psect	text5
  1000  01ED                     __ptext5:	
  1001 ;; *************** function _disableTMR1Intterrupt *****************
  1002 ;; Defined at:
  1003 ;;		line 30 in file "tmr1.c"
  1004 ;; Parameters:    Size  Location     Type
  1005 ;;		None
  1006 ;; Auto vars:     Size  Location     Type
  1007 ;;		None
  1008 ;; Return value:  Size  Location     Type
  1009 ;;                  1    wreg      void 
  1010 ;; Registers used:
  1011 ;;		None
  1012 ;; Tracked objects:
  1013 ;;		On entry : 0/0
  1014 ;;		On exit  : 0/0
  1015 ;;		Unchanged: 0/0
  1016 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1017 ;;      Params:         0       0       0       0       0
  1018 ;;      Locals:         0       0       0       0       0
  1019 ;;      Temps:          0       0       0       0       0
  1020 ;;      Totals:         0       0       0       0       0
  1021 ;;Total ram usage:        0 bytes
  1022 ;; Hardware stack levels used:    1
  1023 ;; Hardware stack levels required when called:    3
  1024 ;; This function calls:
  1025 ;;		Nothing
  1026 ;; This function is called by:
  1027 ;;		_setup
  1028 ;;		_tmr1Reload
  1029 ;; This function uses a non-reentrant model
  1030 ;;
  1031                           
  1032                           
  1033                           ;psect for function _disableTMR1Intterrupt
  1034  01ED                     _disableTMR1Intterrupt:
  1035  01ED                     l900:	
  1036                           ;incstack = 0
  1037                           ; Regs used in _disableTMR1Intterrupt: []
  1038                           
  1039                           
  1040                           ;tmr1.c: 31:     PIE1bits.TMR1IE = 0;
  1041  01ED  1683               	bsf	3,5	;RP0=1, select bank1
  1042  01EE  1303               	bcf	3,6	;RP1=0, select bank1
  1043  01EF  100C               	bcf	12,0	;volatile
  1044  01F0                     l86:
  1045  01F0  0008               	return
  1046  01F1                     __end_of_disableTMR1Intterrupt:
  1047                           
  1048                           	psect	text6
  1049  01F1                     __ptext6:	
  1050 ;; *************** function _tmr1On *****************
  1051 ;; Defined at:
  1052 ;;		line 43 in file "tmr1.c"
  1053 ;; Parameters:    Size  Location     Type
  1054 ;;		None
  1055 ;; Auto vars:     Size  Location     Type
  1056 ;;		None
  1057 ;; Return value:  Size  Location     Type
  1058 ;;                  1    wreg      void 
  1059 ;; Registers used:
  1060 ;;		None
  1061 ;; Tracked objects:
  1062 ;;		On entry : 0/0
  1063 ;;		On exit  : 0/0
  1064 ;;		Unchanged: 0/0
  1065 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1066 ;;      Params:         0       0       0       0       0
  1067 ;;      Locals:         0       0       0       0       0
  1068 ;;      Temps:          0       0       0       0       0
  1069 ;;      Totals:         0       0       0       0       0
  1070 ;;Total ram usage:        0 bytes
  1071 ;; Hardware stack levels used:    1
  1072 ;; Hardware stack levels required when called:    3
  1073 ;; This function calls:
  1074 ;;		Nothing
  1075 ;; This function is called by:
  1076 ;;		_tmr1Init
  1077 ;; This function uses a non-reentrant model
  1078 ;;
  1079                           
  1080                           
  1081                           ;psect for function _tmr1On
  1082  01F1                     _tmr1On:
  1083  01F1                     l910:	
  1084                           ;incstack = 0
  1085                           ; Regs used in _tmr1On: []
  1086                           
  1087                           
  1088                           ;tmr1.c: 44:     T1CONbits.TMR1ON = 1;
  1089  01F1  1283               	bcf	3,5	;RP0=0, select bank0
  1090  01F2  1303               	bcf	3,6	;RP1=0, select bank0
  1091  01F3  1410               	bsf	16,0	;volatile
  1092  01F4                     l95:
  1093  01F4  0008               	return
  1094  01F5                     __end_of_tmr1On:
  1095                           
  1096                           	psect	text7
  1097  01FD                     __ptext7:	
  1098 ;; *************** function _enablePeripheralInterrupts *****************
  1099 ;; Defined at:
  1100 ;;		line 20 in file "interrupts.c"
  1101 ;; Parameters:    Size  Location     Type
  1102 ;;		None
  1103 ;; Auto vars:     Size  Location     Type
  1104 ;;		None
  1105 ;; Return value:  Size  Location     Type
  1106 ;;                  1    wreg      void 
  1107 ;; Registers used:
  1108 ;;		None
  1109 ;; Tracked objects:
  1110 ;;		On entry : 0/0
  1111 ;;		On exit  : 0/0
  1112 ;;		Unchanged: 0/0
  1113 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1114 ;;      Params:         0       0       0       0       0
  1115 ;;      Locals:         0       0       0       0       0
  1116 ;;      Temps:          0       0       0       0       0
  1117 ;;      Totals:         0       0       0       0       0
  1118 ;;Total ram usage:        0 bytes
  1119 ;; Hardware stack levels used:    1
  1120 ;; Hardware stack levels required when called:    3
  1121 ;; This function calls:
  1122 ;;		Nothing
  1123 ;; This function is called by:
  1124 ;;		_setup
  1125 ;; This function uses a non-reentrant model
  1126 ;;
  1127                           
  1128                           
  1129                           ;psect for function _enablePeripheralInterrupts
  1130  01FD                     _enablePeripheralInterrupts:
  1131  01FD                     l920:	
  1132                           ;incstack = 0
  1133                           ; Regs used in _enablePeripheralInterrupts: []
  1134                           
  1135                           
  1136                           ;interrupts.c: 21:     INTCONbits.PEIE = 1;
  1137  01FD  170B               	bsf	11,6	;volatile
  1138  01FE                     l109:
  1139  01FE  0008               	return
  1140  01FF                     __end_of_enablePeripheralInterrupts:
  1141                           
  1142                           	psect	text8
  1143  01FF                     __ptext8:	
  1144 ;; *************** function _enableGlobalInterrupts *****************
  1145 ;; Defined at:
  1146 ;;		line 11 in file "interrupts.c"
  1147 ;; Parameters:    Size  Location     Type
  1148 ;;		None
  1149 ;; Auto vars:     Size  Location     Type
  1150 ;;		None
  1151 ;; Return value:  Size  Location     Type
  1152 ;;                  1    wreg      void 
  1153 ;; Registers used:
  1154 ;;		None
  1155 ;; Tracked objects:
  1156 ;;		On entry : 0/0
  1157 ;;		On exit  : 0/0
  1158 ;;		Unchanged: 0/0
  1159 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1160 ;;      Params:         0       0       0       0       0
  1161 ;;      Locals:         0       0       0       0       0
  1162 ;;      Temps:          0       0       0       0       0
  1163 ;;      Totals:         0       0       0       0       0
  1164 ;;Total ram usage:        0 bytes
  1165 ;; Hardware stack levels used:    1
  1166 ;; Hardware stack levels required when called:    3
  1167 ;; This function calls:
  1168 ;;		Nothing
  1169 ;; This function is called by:
  1170 ;;		_setup
  1171 ;; This function uses a non-reentrant model
  1172 ;;
  1173                           
  1174                           
  1175                           ;psect for function _enableGlobalInterrupts
  1176  01FF                     _enableGlobalInterrupts:
  1177  01FF                     l918:	
  1178                           ;incstack = 0
  1179                           ; Regs used in _enableGlobalInterrupts: []
  1180                           
  1181                           
  1182                           ;interrupts.c: 12:     INTCONbits.GIE = 1;
  1183  01FF  178B               	bsf	11,7	;volatile
  1184  0200                     l103:
  1185  0200  0008               	return
  1186  0201                     __end_of_enableGlobalInterrupts:
  1187                           
  1188                           	psect	text9
  1189  01DB                     __ptext9:	
  1190 ;; *************** function _CCP2Init *****************
  1191 ;; Defined at:
  1192 ;;		line 17 in file "CCP2.c"
  1193 ;; Parameters:    Size  Location     Type
  1194 ;;  mode            1    wreg     unsigned char 
  1195 ;; Auto vars:     Size  Location     Type
  1196 ;;  mode            1    0[BANK0 ] unsigned char 
  1197 ;; Return value:  Size  Location     Type
  1198 ;;                  1    wreg      void 
  1199 ;; Registers used:
  1200 ;;		wreg, status,2, status,0
  1201 ;; Tracked objects:
  1202 ;;		On entry : 0/0
  1203 ;;		On exit  : 0/0
  1204 ;;		Unchanged: 0/0
  1205 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1206 ;;      Params:         0       0       0       0       0
  1207 ;;      Locals:         0       1       0       0       0
  1208 ;;      Temps:          0       0       0       0       0
  1209 ;;      Totals:         0       1       0       0       0
  1210 ;;Total ram usage:        1 bytes
  1211 ;; Hardware stack levels used:    1
  1212 ;; Hardware stack levels required when called:    3
  1213 ;; This function calls:
  1214 ;;		Nothing
  1215 ;; This function is called by:
  1216 ;;		_setup
  1217 ;; This function uses a non-reentrant model
  1218 ;;
  1219                           
  1220                           
  1221                           ;psect for function _CCP2Init
  1222  01DB                     _CCP2Init:
  1223                           
  1224                           ;incstack = 0
  1225                           ; Regs used in _CCP2Init: [wreg+status,2+status,0]
  1226                           ;CCP2Init@mode stored from wreg
  1227  01DB  1283               	bcf	3,5	;RP0=0, select bank0
  1228  01DC  1303               	bcf	3,6	;RP1=0, select bank0
  1229  01DD  00A0               	movwf	CCP2Init@mode
  1230  01DE                     l916:
  1231                           
  1232                           ;CCP2.c: 18:     CCP2CONbits.CCP2M = mode;
  1233  01DE  081D               	movf	29,w	;volatile
  1234  01DF  0620               	xorwf	CCP2Init@mode,w
  1235  01E0  39F0               	andlw	-16
  1236  01E1  0620               	xorwf	CCP2Init@mode,w
  1237  01E2  009D               	movwf	29	;volatile
  1238  01E3                     l117:
  1239  01E3  0008               	return
  1240  01E4                     __end_of_CCP2Init:
  1241                           
  1242                           	psect	text10
  1243  0095                     __ptext10:	
  1244 ;; *************** function _DCCisRawPacketValid *****************
  1245 ;; Defined at:
  1246 ;;		line 38 in file "DCC.c"
  1247 ;; Parameters:    Size  Location     Type
  1248 ;;		None
  1249 ;; Auto vars:     Size  Location     Type
  1250 ;;  expect          4   19[BANK0 ] unsigned long 
  1251 ;;  mask            4    0        unsigned long 
  1252 ;;  ret             2   24[BANK0 ] int 
  1253 ;; Return value:  Size  Location     Type
  1254 ;;                  2    9[BANK0 ] int 
  1255 ;; Registers used:
  1256 ;;		wreg, status,2, status,0, pclath, cstack
  1257 ;; Tracked objects:
  1258 ;;		On entry : 0/0
  1259 ;;		On exit  : 0/0
  1260 ;;		Unchanged: 0/0
  1261 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1262 ;;      Params:         0       2       0       0       0
  1263 ;;      Locals:         0      11       0       0       0
  1264 ;;      Temps:          0       4       0       0       0
  1265 ;;      Totals:         0      17       0       0       0
  1266 ;;Total ram usage:       17 bytes
  1267 ;; Hardware stack levels used:    1
  1268 ;; Hardware stack levels required when called:    4
  1269 ;; This function calls:
  1270 ;;		_DCCgetAddress
  1271 ;;		_DCCgetChecksum
  1272 ;;		_DCCgetData
  1273 ;; This function is called by:
  1274 ;;		_main
  1275 ;; This function uses a non-reentrant model
  1276 ;;
  1277                           
  1278                           
  1279                           ;psect for function _DCCisRawPacketValid
  1280  0095                     _DCCisRawPacketValid:
  1281  0095                     l970:	
  1282                           ;incstack = 0
  1283                           ; Regs used in _DCCisRawPacketValid: [wreg+status,2+status,0+pclath+cstack]
  1284                           
  1285                           
  1286                           ;DCC.c: 40:     uint32_t expect = 0xF0000000;
  1287  0095  30F0               	movlw	240
  1288  0096  1283               	bcf	3,5	;RP0=0, select bank0
  1289  0097  1303               	bcf	3,6	;RP1=0, select bank0
  1290  0098  00B6               	movwf	DCCisRawPacketValid@expect+3
  1291  0099  3000               	movlw	0
  1292  009A  00B5               	movwf	DCCisRawPacketValid@expect+2
  1293  009B  3000               	movlw	0
  1294  009C  00B4               	movwf	DCCisRawPacketValid@expect+1
  1295  009D  3000               	movlw	0
  1296  009E  00B3               	movwf	DCCisRawPacketValid@expect
  1297  009F                     l972:
  1298                           
  1299                           ;DCC.c: 41:     int ret = (((rawPacketHigh & 0x3FF) == 0x3FF) && ((rawPacketLow & mask) 
      +                          == expect));
  1300  009F  01B7               	clrf	_DCCisRawPacketValid$307
  1301  00A0                     l974:
  1302  00A0  30FF               	movlw	255
  1303  00A1  057C               	andwf	_rawPacketHigh,w
  1304  00A2  00AB               	movwf	??_DCCisRawPacketValid
  1305  00A3  3003               	movlw	3
  1306  00A4  057D               	andwf	_rawPacketHigh+1,w
  1307  00A5  00AC               	movwf	??_DCCisRawPacketValid+1
  1308  00A6  0A2B               	incf	??_DCCisRawPacketValid,w
  1309  00A7  3003               	movlw	3
  1310  00A8  1903               	skipnz
  1311  00A9  062C               	xorwf	??_DCCisRawPacketValid+1,w
  1312  00AA  1D03               	btfss	3,2
  1313  00AB  28AD               	goto	u171
  1314  00AC  28AE               	goto	u170
  1315  00AD                     u171:
  1316  00AD  28C7               	goto	l980
  1317  00AE                     u170:
  1318  00AE                     l976:
  1319  00AE  3001               	movlw	1
  1320  00AF  0578               	andwf	_rawPacketLow,w
  1321  00B0  00AB               	movwf	??_DCCisRawPacketValid
  1322  00B1  3002               	movlw	2
  1323  00B2  0579               	andwf	_rawPacketLow+1,w
  1324  00B3  00AC               	movwf	??_DCCisRawPacketValid+1
  1325  00B4  3004               	movlw	4
  1326  00B5  057A               	andwf	_rawPacketLow+2,w
  1327  00B6  00AD               	movwf	??_DCCisRawPacketValid+2
  1328  00B7  30F8               	movlw	248
  1329  00B8  057B               	andwf	_rawPacketLow+3,w
  1330  00B9  00AE               	movwf	??_DCCisRawPacketValid+3
  1331  00BA  30F0               	movlw	240
  1332  00BB  062E               	xorwf	??_DCCisRawPacketValid+3,w
  1333  00BC  042B               	iorwf	??_DCCisRawPacketValid,w
  1334  00BD  042C               	iorwf	??_DCCisRawPacketValid+1,w
  1335  00BE  042D               	iorwf	??_DCCisRawPacketValid+2,w
  1336  00BF  1D03               	btfss	3,2
  1337  00C0  28C2               	goto	u181
  1338  00C1  28C3               	goto	u180
  1339  00C2                     u181:
  1340  00C2  28C7               	goto	l980
  1341  00C3                     u180:
  1342  00C3                     l978:
  1343  00C3  1283               	bcf	3,5	;RP0=0, select bank0
  1344  00C4  1303               	bcf	3,6	;RP1=0, select bank0
  1345  00C5  01B7               	clrf	_DCCisRawPacketValid$307
  1346  00C6  0AB7               	incf	_DCCisRawPacketValid$307,f
  1347  00C7                     l980:
  1348  00C7  1283               	bcf	3,5	;RP0=0, select bank0
  1349  00C8  1303               	bcf	3,6	;RP1=0, select bank0
  1350  00C9  0837               	movf	_DCCisRawPacketValid$307,w
  1351  00CA  00AB               	movwf	??_DCCisRawPacketValid
  1352  00CB  01AC               	clrf	??_DCCisRawPacketValid+1
  1353  00CC  082B               	movf	??_DCCisRawPacketValid,w
  1354  00CD  00B8               	movwf	DCCisRawPacketValid@ret
  1355  00CE  082C               	movf	??_DCCisRawPacketValid+1,w
  1356  00CF  00B9               	movwf	DCCisRawPacketValid@ret+1
  1357  00D0                     l982:
  1358                           
  1359                           ;DCC.c: 42:     if (ret){
  1360  00D0  0838               	movf	DCCisRawPacketValid@ret,w
  1361  00D1  0439               	iorwf	DCCisRawPacketValid@ret+1,w
  1362  00D2  1903               	btfsc	3,2
  1363  00D3  28D5               	goto	u191
  1364  00D4  28D6               	goto	u190
  1365  00D5                     u191:
  1366  00D5  28ED               	goto	l992
  1367  00D6                     u190:
  1368  00D6                     l984:
  1369                           
  1370                           ;DCC.c: 43:         validRawPacket = rawPacketLow;
  1371  00D6  087B               	movf	_rawPacketLow+3,w
  1372  00D7  00C1               	movwf	_validRawPacket+3
  1373  00D8  087A               	movf	_rawPacketLow+2,w
  1374  00D9  00C0               	movwf	_validRawPacket+2
  1375  00DA  0879               	movf	_rawPacketLow+1,w
  1376  00DB  00BF               	movwf	_validRawPacket+1
  1377  00DC  0878               	movf	_rawPacketLow,w
  1378  00DD  00BE               	movwf	_validRawPacket
  1379  00DE                     l986:
  1380                           
  1381                           ;DCC.c: 44:         DCCgetChecksum();
  1382  00DE  120A  118A  21D0  120A  118A  	fcall	_DCCgetChecksum
  1383  00E3                     l988:
  1384                           
  1385                           ;DCC.c: 45:         DCCgetData();
  1386  00E3  120A  118A  21E4  120A  118A  	fcall	_DCCgetData
  1387  00E8                     l990:
  1388                           
  1389                           ;DCC.c: 46:         DCCgetAddress();
  1390  00E8  120A  118A  2141  120A  118A  	fcall	_DCCgetAddress
  1391  00ED                     l992:
  1392                           
  1393                           ;DCC.c: 48:     return ret;
  1394  00ED  1283               	bcf	3,5	;RP0=0, select bank0
  1395  00EE  1303               	bcf	3,6	;RP1=0, select bank0
  1396  00EF  0839               	movf	DCCisRawPacketValid@ret+1,w
  1397  00F0  00AA               	movwf	?_DCCisRawPacketValid+1
  1398  00F1  0838               	movf	DCCisRawPacketValid@ret,w
  1399  00F2  00A9               	movwf	?_DCCisRawPacketValid
  1400  00F3                     l148:
  1401  00F3  0008               	return
  1402  00F4                     __end_of_DCCisRawPacketValid:
  1403                           
  1404                           	psect	text11
  1405  01E4                     __ptext11:	
  1406 ;; *************** function _DCCgetData *****************
  1407 ;; Defined at:
  1408 ;;		line 58 in file "DCC.c"
  1409 ;; Parameters:    Size  Location     Type
  1410 ;;		None
  1411 ;; Auto vars:     Size  Location     Type
  1412 ;;  ret             1    0        unsigned char 
  1413 ;; Return value:  Size  Location     Type
  1414 ;;                  1    wreg      unsigned char 
  1415 ;; Registers used:
  1416 ;;		wreg, status,2
  1417 ;; Tracked objects:
  1418 ;;		On entry : 0/0
  1419 ;;		On exit  : 0/0
  1420 ;;		Unchanged: 0/0
  1421 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1422 ;;      Params:         0       0       0       0       0
  1423 ;;      Locals:         0       1       0       0       0
  1424 ;;      Temps:          0       0       0       0       0
  1425 ;;      Totals:         0       1       0       0       0
  1426 ;;Total ram usage:        1 bytes
  1427 ;; Hardware stack levels used:    1
  1428 ;; Hardware stack levels required when called:    3
  1429 ;; This function calls:
  1430 ;;		Nothing
  1431 ;; This function is called by:
  1432 ;;		_main
  1433 ;;		_DCCisRawPacketValid
  1434 ;; This function uses a non-reentrant model
  1435 ;;
  1436                           
  1437                           
  1438                           ;psect for function _DCCgetData
  1439  01E4                     _DCCgetData:
  1440  01E4                     l932:	
  1441                           ;incstack = 0
  1442                           ; Regs used in _DCCgetData: [wreg+status,2]
  1443                           
  1444  01E4                     l934:
  1445                           
  1446                           ;DCC.c: 60:     dccPacketData = ret;
  1447  01E4  1283               	bcf	3,5	;RP0=0, select bank0
  1448  01E5  1303               	bcf	3,6	;RP1=0, select bank0
  1449  01E6  01C4               	clrf	_dccPacketData
  1450  01E7                     l936:
  1451                           
  1452                           ;DCC.c: 61:     return ret;
  1453  01E7  3000               	movlw	0
  1454  01E8                     l154:
  1455  01E8  0008               	return
  1456  01E9                     __end_of_DCCgetData:
  1457                           
  1458                           	psect	text12
  1459  01D0                     __ptext12:	
  1460 ;; *************** function _DCCgetChecksum *****************
  1461 ;; Defined at:
  1462 ;;		line 52 in file "DCC.c"
  1463 ;; Parameters:    Size  Location     Type
  1464 ;;		None
  1465 ;; Auto vars:     Size  Location     Type
  1466 ;;  ret             1    2[BANK0 ] unsigned char 
  1467 ;; Return value:  Size  Location     Type
  1468 ;;                  1    wreg      unsigned char 
  1469 ;; Registers used:
  1470 ;;		wreg, status,2, status,0
  1471 ;; Tracked objects:
  1472 ;;		On entry : 0/0
  1473 ;;		On exit  : 0/0
  1474 ;;		Unchanged: 0/0
  1475 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1476 ;;      Params:         0       0       0       0       0
  1477 ;;      Locals:         0       1       0       0       0
  1478 ;;      Temps:          0       2       0       0       0
  1479 ;;      Totals:         0       3       0       0       0
  1480 ;;Total ram usage:        3 bytes
  1481 ;; Hardware stack levels used:    1
  1482 ;; Hardware stack levels required when called:    3
  1483 ;; This function calls:
  1484 ;;		Nothing
  1485 ;; This function is called by:
  1486 ;;		_main
  1487 ;;		_DCCisRawPacketValid
  1488 ;; This function uses a non-reentrant model
  1489 ;;
  1490                           
  1491                           
  1492                           ;psect for function _DCCgetChecksum
  1493  01D0                     _DCCgetChecksum:
  1494  01D0                     l940:	
  1495                           ;incstack = 0
  1496                           ; Regs used in _DCCgetChecksum: [wreg+status,2+status,0]
  1497                           
  1498                           
  1499                           ;DCC.c: 53:     uint8_t ret = (uint8_t) validRawPacket >> 1;
  1500  01D0  1283               	bcf	3,5	;RP0=0, select bank0
  1501  01D1  1303               	bcf	3,6	;RP1=0, select bank0
  1502  01D2  083E               	movf	_validRawPacket,w
  1503  01D3  00A0               	movwf	??_DCCgetChecksum
  1504  01D4  1003               	clrc
  1505  01D5  0C20               	rrf	??_DCCgetChecksum,w
  1506  01D6  00A1               	movwf	??_DCCgetChecksum+1
  1507  01D7  0821               	movf	??_DCCgetChecksum+1,w
  1508  01D8  00A2               	movwf	DCCgetChecksum@ret
  1509  01D9                     l942:
  1510                           
  1511                           ;DCC.c: 55:     return ret;
  1512  01D9  0822               	movf	DCCgetChecksum@ret,w
  1513  01DA                     l151:
  1514  01DA  0008               	return
  1515  01DB                     __end_of_DCCgetChecksum:
  1516                           
  1517                           	psect	text13
  1518  0141                     __ptext13:	
  1519 ;; *************** function _DCCgetAddress *****************
  1520 ;; Defined at:
  1521 ;;		line 64 in file "DCC.c"
  1522 ;; Parameters:    Size  Location     Type
  1523 ;;		None
  1524 ;; Auto vars:     Size  Location     Type
  1525 ;;  val             4    4[BANK0 ] unsigned long 
  1526 ;;  ret             1    8[BANK0 ] unsigned char 
  1527 ;; Return value:  Size  Location     Type
  1528 ;;                  1    wreg      unsigned char 
  1529 ;; Registers used:
  1530 ;;		wreg, status,2, status,0
  1531 ;; Tracked objects:
  1532 ;;		On entry : 0/0
  1533 ;;		On exit  : 0/0
  1534 ;;		Unchanged: 0/0
  1535 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1536 ;;      Params:         0       0       0       0       0
  1537 ;;      Locals:         0       5       0       0       0
  1538 ;;      Temps:          0       4       0       0       0
  1539 ;;      Totals:         0       9       0       0       0
  1540 ;;Total ram usage:        9 bytes
  1541 ;; Hardware stack levels used:    1
  1542 ;; Hardware stack levels required when called:    3
  1543 ;; This function calls:
  1544 ;;		Nothing
  1545 ;; This function is called by:
  1546 ;;		_main
  1547 ;;		_DCCisRawPacketValid
  1548 ;; This function uses a non-reentrant model
  1549 ;;
  1550                           
  1551                           
  1552                           ;psect for function _DCCgetAddress
  1553  0141                     _DCCgetAddress:
  1554  0141                     l922:	
  1555                           ;incstack = 0
  1556                           ; Regs used in _DCCgetAddress: [wreg+status,2+status,0]
  1557                           
  1558                           
  1559                           ;DCC.c: 65:     uint32_t val = validRawPacket >> 19;
  1560  0141  1283               	bcf	3,5	;RP0=0, select bank0
  1561  0142  1303               	bcf	3,6	;RP1=0, select bank0
  1562  0143  083E               	movf	_validRawPacket,w
  1563  0144  00A0               	movwf	??_DCCgetAddress
  1564  0145  083F               	movf	_validRawPacket+1,w
  1565  0146  00A1               	movwf	??_DCCgetAddress+1
  1566  0147  0840               	movf	_validRawPacket+2,w
  1567  0148  00A2               	movwf	??_DCCgetAddress+2
  1568  0149  0841               	movf	_validRawPacket+3,w
  1569  014A  00A3               	movwf	??_DCCgetAddress+3
  1570  014B  3013               	movlw	19
  1571  014C                     u125:
  1572  014C  1003               	clrc
  1573  014D  0CA3               	rrf	??_DCCgetAddress+3,f
  1574  014E  0CA2               	rrf	??_DCCgetAddress+2,f
  1575  014F  0CA1               	rrf	??_DCCgetAddress+1,f
  1576  0150  0CA0               	rrf	??_DCCgetAddress,f
  1577  0151                     u120:
  1578  0151  3EFF               	addlw	-1
  1579  0152  1D03               	skipz
  1580  0153  294C               	goto	u125
  1581  0154  0823               	movf	??_DCCgetAddress+3,w
  1582  0155  00A7               	movwf	DCCgetAddress@val+3
  1583  0156  0822               	movf	??_DCCgetAddress+2,w
  1584  0157  00A6               	movwf	DCCgetAddress@val+2
  1585  0158  0821               	movf	??_DCCgetAddress+1,w
  1586  0159  00A5               	movwf	DCCgetAddress@val+1
  1587  015A  0820               	movf	??_DCCgetAddress,w
  1588  015B  00A4               	movwf	DCCgetAddress@val
  1589  015C                     l924:
  1590                           
  1591                           ;DCC.c: 66:     uint8_t ret = (uint8_t) val;
  1592  015C  0824               	movf	DCCgetAddress@val,w
  1593  015D  00A0               	movwf	??_DCCgetAddress
  1594  015E  0820               	movf	??_DCCgetAddress,w
  1595  015F  00A8               	movwf	DCCgetAddress@ret
  1596  0160                     l926:
  1597                           
  1598                           ;DCC.c: 67:     dccPacketAddress = ret;
  1599  0160  0828               	movf	DCCgetAddress@ret,w
  1600  0161  00A0               	movwf	??_DCCgetAddress
  1601  0162  0820               	movf	??_DCCgetAddress,w
  1602  0163  00C3               	movwf	_dccPacketAddress
  1603  0164                     l928:
  1604                           
  1605                           ;DCC.c: 68:     return ret;
  1606  0164  0828               	movf	DCCgetAddress@ret,w
  1607  0165                     l157:
  1608  0165  0008               	return
  1609  0166                     __end_of_DCCgetAddress:
  1610                           
  1611                           	psect	text14
  1612  0166                     __ptext14:	
  1613 ;; *************** function _my_isr_routine *****************
  1614 ;; Defined at:
  1615 ;;		line 31 in file "main.c"
  1616 ;; Parameters:    Size  Location     Type
  1617 ;;		None
  1618 ;; Auto vars:     Size  Location     Type
  1619 ;;		None
  1620 ;; Return value:  Size  Location     Type
  1621 ;;                  1    wreg      void 
  1622 ;; Registers used:
  1623 ;;		wreg, status,2, status,0, pclath, cstack
  1624 ;; Tracked objects:
  1625 ;;		On entry : 0/0
  1626 ;;		On exit  : 0/0
  1627 ;;		Unchanged: 0/0
  1628 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1629 ;;      Params:         0       0       0       0       0
  1630 ;;      Locals:         0       0       0       0       0
  1631 ;;      Temps:          2       0       0       0       0
  1632 ;;      Totals:         2       0       0       0       0
  1633 ;;Total ram usage:        2 bytes
  1634 ;; Hardware stack levels used:    1
  1635 ;; Hardware stack levels required when called:    2
  1636 ;; This function calls:
  1637 ;;		_DCCbitDecode
  1638 ;;		i1_tmr1Reload
  1639 ;; This function is called by:
  1640 ;;		Interrupt level 1
  1641 ;; This function uses a non-reentrant model
  1642 ;;
  1643                           
  1644                           
  1645                           ;psect for function _my_isr_routine
  1646  0166                     _my_isr_routine:
  1647  0166                     i1l996:
  1648                           
  1649                           ;main.c: 32:     DCCbitDecode(TMR1);
  1650  0166  1283               	bcf	3,5	;RP0=0, select bank0
  1651  0167  1303               	bcf	3,6	;RP1=0, select bank0
  1652  0168  080F               	movf	15,w	;volatile
  1653  0169  00F1               	movwf	DCCbitDecode@TMR1Value+1
  1654  016A  080E               	movf	14,w	;volatile
  1655  016B  00F0               	movwf	DCCbitDecode@TMR1Value
  1656  016C  120A  118A  2025  120A  118A  	fcall	_DCCbitDecode
  1657  0171                     i1l998:
  1658                           
  1659                           ;main.c: 33:     if (PIR2bits.CCP2IF) {
  1660  0171  1283               	bcf	3,5	;RP0=0, select bank0
  1661  0172  1303               	bcf	3,6	;RP1=0, select bank0
  1662  0173  1C0D               	btfss	13,0	;volatile
  1663  0174  2976               	goto	u20_21
  1664  0175  2977               	goto	u20_20
  1665  0176                     u20_21:
  1666  0176  297F               	goto	i1l45
  1667  0177                     u20_20:
  1668  0177                     i1l1000:
  1669                           
  1670                           ;main.c: 34:         tmr1Reload();
  1671  0177  120A  118A  21B3  120A  118A  	fcall	i1_tmr1Reload
  1672  017C                     i1l1002:
  1673                           
  1674                           ;main.c: 35:         CCP2IF = 0;
  1675  017C  1283               	bcf	3,5	;RP0=0, select bank0
  1676  017D  1303               	bcf	3,6	;RP1=0, select bank0
  1677  017E  100D               	bcf	13,0	;volatile
  1678  017F                     i1l45:
  1679  017F  0877               	movf	??_my_isr_routine+1,w
  1680  0180  008A               	movwf	10
  1681  0181  0E76               	swapf	??_my_isr_routine,w
  1682  0182  0083               	movwf	3
  1683  0183  0EFE               	swapf	btemp,f
  1684  0184  0E7E               	swapf	btemp,w
  1685  0185  0009               	retfie
  1686  0186                     __end_of_my_isr_routine:
  1687                           
  1688                           	psect	intentry
  1689  0004                     __pintentry:	
  1690                           ;incstack = 0
  1691                           ; Regs used in _my_isr_routine: [wreg+status,2+status,0+pclath+cstack]
  1692                           
  1693  0004                     interrupt_function:
  1694  007E                     saved_w	set	btemp
  1695  0004  00FE               	movwf	btemp
  1696  0005  0E03               	swapf	3,w
  1697  0006  00F6               	movwf	??_my_isr_routine
  1698  0007  080A               	movf	10,w
  1699  0008  00F7               	movwf	??_my_isr_routine+1
  1700  0009  120A  118A  2966   	ljmp	_my_isr_routine
  1701                           
  1702                           	psect	text15
  1703  01B3                     __ptext15:	
  1704 ;; *************** function i1_tmr1Reload *****************
  1705 ;; Defined at:
  1706 ;;		line 19 in file "tmr1.c"
  1707 ;; Parameters:    Size  Location     Type
  1708 ;;		None
  1709 ;; Auto vars:     Size  Location     Type
  1710 ;;		None
  1711 ;; Return value:  Size  Location     Type
  1712 ;;                  1    wreg      void 
  1713 ;; Registers used:
  1714 ;;		status,2, status,0, pclath, cstack
  1715 ;; Tracked objects:
  1716 ;;		On entry : 0/0
  1717 ;;		On exit  : 0/0
  1718 ;;		Unchanged: 0/0
  1719 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1720 ;;      Params:         0       0       0       0       0
  1721 ;;      Locals:         0       0       0       0       0
  1722 ;;      Temps:          0       0       0       0       0
  1723 ;;      Totals:         0       0       0       0       0
  1724 ;;Total ram usage:        0 bytes
  1725 ;; Hardware stack levels used:    1
  1726 ;; Hardware stack levels required when called:    1
  1727 ;; This function calls:
  1728 ;;		i1_disableTMR1Intterrupt
  1729 ;;		i1_enableTMR1Intterrupt
  1730 ;; This function is called by:
  1731 ;;		_my_isr_routine
  1732 ;; This function uses a non-reentrant model
  1733 ;;
  1734                           
  1735                           
  1736                           ;psect for function i1_tmr1Reload
  1737  01B3                     i1_tmr1Reload:
  1738  01B3                     i1l854:	
  1739                           ;incstack = 0
  1740                           ; Regs used in i1_tmr1Reload: [status,2+status,0+pclath+cstack]
  1741                           
  1742                           
  1743                           ;tmr1.c: 20:     disableTMR1Intterrupt();
  1744  01B3  120A  118A  21F9  120A  118A  	fcall	i1_disableTMR1Intterrupt
  1745  01B8                     i1l856:
  1746                           
  1747                           ;tmr1.c: 21:     TMR1H = 0;
  1748  01B8  1283               	bcf	3,5	;RP0=0, select bank0
  1749  01B9  1303               	bcf	3,6	;RP1=0, select bank0
  1750  01BA  018F               	clrf	15	;volatile
  1751  01BB                     i1l858:
  1752                           
  1753                           ;tmr1.c: 22:     TMR1L = 0;
  1754  01BB  018E               	clrf	14	;volatile
  1755                           
  1756                           ;tmr1.c: 23:     enableTMR1Intterrupt();
  1757  01BC  120A  118A  21F5  120A  118A  	fcall	i1_enableTMR1Intterrupt
  1758  01C1                     i1l80:
  1759  01C1  0008               	return
  1760  01C2                     __end_ofi1_tmr1Reload:
  1761                           
  1762                           	psect	text16
  1763  01F5                     __ptext16:	
  1764 ;; *************** function i1_enableTMR1Intterrupt *****************
  1765 ;; Defined at:
  1766 ;;		line 26 in file "tmr1.c"
  1767 ;; Parameters:    Size  Location     Type
  1768 ;;		None
  1769 ;; Auto vars:     Size  Location     Type
  1770 ;;		None
  1771 ;; Return value:  Size  Location     Type
  1772 ;;                  1    wreg      void 
  1773 ;; Registers used:
  1774 ;;		None
  1775 ;; Tracked objects:
  1776 ;;		On entry : 0/0
  1777 ;;		On exit  : 0/0
  1778 ;;		Unchanged: 0/0
  1779 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1780 ;;      Params:         0       0       0       0       0
  1781 ;;      Locals:         0       0       0       0       0
  1782 ;;      Temps:          0       0       0       0       0
  1783 ;;      Totals:         0       0       0       0       0
  1784 ;;Total ram usage:        0 bytes
  1785 ;; Hardware stack levels used:    1
  1786 ;; This function calls:
  1787 ;;		Nothing
  1788 ;; This function is called by:
  1789 ;;		i1_tmr1Reload
  1790 ;; This function uses a non-reentrant model
  1791 ;;
  1792                           
  1793                           
  1794                           ;psect for function i1_enableTMR1Intterrupt
  1795  01F5                     i1_enableTMR1Intterrupt:
  1796  01F5                     i1l800:	
  1797                           ;incstack = 0
  1798                           ; Regs used in i1_enableTMR1Intterrupt: []
  1799                           
  1800                           
  1801                           ;tmr1.c: 27:     PIE1bits.TMR1IE = 1;
  1802  01F5  1683               	bsf	3,5	;RP0=1, select bank1
  1803  01F6  1303               	bcf	3,6	;RP1=0, select bank1
  1804  01F7  140C               	bsf	12,0	;volatile
  1805  01F8                     i1l83:
  1806  01F8  0008               	return
  1807  01F9                     __end_ofi1_enableTMR1Intterrupt:
  1808                           
  1809                           	psect	text17
  1810  01F9                     __ptext17:	
  1811 ;; *************** function i1_disableTMR1Intterrupt *****************
  1812 ;; Defined at:
  1813 ;;		line 30 in file "tmr1.c"
  1814 ;; Parameters:    Size  Location     Type
  1815 ;;		None
  1816 ;; Auto vars:     Size  Location     Type
  1817 ;;		None
  1818 ;; Return value:  Size  Location     Type
  1819 ;;                  1    wreg      void 
  1820 ;; Registers used:
  1821 ;;		None
  1822 ;; Tracked objects:
  1823 ;;		On entry : 0/0
  1824 ;;		On exit  : 0/0
  1825 ;;		Unchanged: 0/0
  1826 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1827 ;;      Params:         0       0       0       0       0
  1828 ;;      Locals:         0       0       0       0       0
  1829 ;;      Temps:          0       0       0       0       0
  1830 ;;      Totals:         0       0       0       0       0
  1831 ;;Total ram usage:        0 bytes
  1832 ;; Hardware stack levels used:    1
  1833 ;; This function calls:
  1834 ;;		Nothing
  1835 ;; This function is called by:
  1836 ;;		i1_tmr1Reload
  1837 ;; This function uses a non-reentrant model
  1838 ;;
  1839                           
  1840                           
  1841                           ;psect for function i1_disableTMR1Intterrupt
  1842  01F9                     i1_disableTMR1Intterrupt:
  1843  01F9                     i1l802:	
  1844                           ;incstack = 0
  1845                           ; Regs used in i1_disableTMR1Intterrupt: []
  1846                           
  1847                           
  1848                           ;tmr1.c: 31:     PIE1bits.TMR1IE = 0;
  1849  01F9  1683               	bsf	3,5	;RP0=1, select bank1
  1850  01FA  1303               	bcf	3,6	;RP1=0, select bank1
  1851  01FB  100C               	bcf	12,0	;volatile
  1852  01FC                     i1l86:
  1853  01FC  0008               	return
  1854  01FD                     __end_ofi1_disableTMR1Intterrupt:
  1855                           
  1856                           	psect	text18
  1857  0025                     __ptext18:	
  1858 ;; *************** function _DCCbitDecode *****************
  1859 ;; Defined at:
  1860 ;;		line 23 in file "DCC.c"
  1861 ;; Parameters:    Size  Location     Type
  1862 ;;  TMR1Value       2    0[COMMON] unsigned int 
  1863 ;; Auto vars:     Size  Location     Type
  1864 ;;		None
  1865 ;; Return value:  Size  Location     Type
  1866 ;;                  1    wreg      void 
  1867 ;; Registers used:
  1868 ;;		wreg, status,2, status,0
  1869 ;; Tracked objects:
  1870 ;;		On entry : 0/0
  1871 ;;		On exit  : 0/0
  1872 ;;		Unchanged: 0/0
  1873 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1874 ;;      Params:         2       0       0       0       0
  1875 ;;      Locals:         0       0       0       0       0
  1876 ;;      Temps:          4       0       0       0       0
  1877 ;;      Totals:         6       0       0       0       0
  1878 ;;Total ram usage:        6 bytes
  1879 ;; Hardware stack levels used:    1
  1880 ;; This function calls:
  1881 ;;		Nothing
  1882 ;; This function is called by:
  1883 ;;		_my_isr_routine
  1884 ;; This function uses a non-reentrant model
  1885 ;;
  1886                           
  1887                           
  1888                           ;psect for function _DCCbitDecode
  1889  0025                     _DCCbitDecode:
  1890  0025                     i1l958:	
  1891                           ;incstack = 0
  1892                           ; Regs used in _DCCbitDecode: [wreg+status,2+status,0]
  1893                           
  1894                           
  1895                           ;DCC.c: 24:     if (rawPacketLow | 0x80000000) {
  1896  0025  3000               	movlw	0
  1897  0026  0478               	iorwf	_rawPacketLow,w
  1898  0027  00F2               	movwf	??_DCCbitDecode
  1899  0028  3000               	movlw	0
  1900  0029  0479               	iorwf	_rawPacketLow+1,w
  1901  002A  00F3               	movwf	??_DCCbitDecode+1
  1902  002B  3000               	movlw	0
  1903  002C  047A               	iorwf	_rawPacketLow+2,w
  1904  002D  00F4               	movwf	??_DCCbitDecode+2
  1905  002E  3080               	movlw	128
  1906  002F  047B               	iorwf	_rawPacketLow+3,w
  1907  0030  00F5               	movwf	??_DCCbitDecode+3
  1908  0031  0875               	movf	??_DCCbitDecode+3,w
  1909  0032  0474               	iorwf	??_DCCbitDecode+2,w
  1910  0033  0473               	iorwf	??_DCCbitDecode+1,w
  1911  0034  0472               	iorwf	??_DCCbitDecode,w
  1912  0035  1903               	skipnz
  1913  0036  2838               	goto	u13_21
  1914  0037  2839               	goto	u13_20
  1915  0038                     u13_21:
  1916  0038  2849               	goto	i1l962
  1917  0039                     u13_20:
  1918  0039                     i1l960:
  1919                           
  1920                           ;DCC.c: 25:         rawPacketHigh = rawPacketHigh * 2 + 1;
  1921  0039  087D               	movf	_rawPacketHigh+1,w
  1922  003A  00F3               	movwf	??_DCCbitDecode+1
  1923  003B  087C               	movf	_rawPacketHigh,w
  1924  003C  00F2               	movwf	??_DCCbitDecode
  1925  003D  1003               	clrc
  1926  003E  0DF2               	rlf	??_DCCbitDecode,f
  1927  003F  0DF3               	rlf	??_DCCbitDecode+1,f
  1928  0040  0872               	movf	??_DCCbitDecode,w
  1929  0041  3E01               	addlw	1
  1930  0042  00FC               	movwf	_rawPacketHigh
  1931  0043  0873               	movf	??_DCCbitDecode+1,w
  1932  0044  1803               	skipnc
  1933  0045  3E01               	addlw	1
  1934  0046  3E00               	addlw	0
  1935  0047  00FD               	movwf	_rawPacketHigh+1
  1936                           
  1937                           ;DCC.c: 26:     } else {
  1938  0048  2862               	goto	i1l964
  1939  0049                     i1l962:
  1940                           
  1941                           ;DCC.c: 27:         rawPacketLow = rawPacketLow * 2;
  1942  0049  0878               	movf	_rawPacketLow,w
  1943  004A  00F2               	movwf	??_DCCbitDecode
  1944  004B  0879               	movf	_rawPacketLow+1,w
  1945  004C  00F3               	movwf	??_DCCbitDecode+1
  1946  004D  087A               	movf	_rawPacketLow+2,w
  1947  004E  00F4               	movwf	??_DCCbitDecode+2
  1948  004F  087B               	movf	_rawPacketLow+3,w
  1949  0050  00F5               	movwf	??_DCCbitDecode+3
  1950  0051  3001               	movlw	1
  1951  0052                     u14_25:
  1952  0052  1003               	clrc
  1953  0053  0DF2               	rlf	??_DCCbitDecode,f
  1954  0054  0DF3               	rlf	??_DCCbitDecode+1,f
  1955  0055  0DF4               	rlf	??_DCCbitDecode+2,f
  1956  0056  0DF5               	rlf	??_DCCbitDecode+3,f
  1957  0057                     u14_20:
  1958  0057  3EFF               	addlw	-1
  1959  0058  1D03               	skipz
  1960  0059  2852               	goto	u14_25
  1961  005A  0875               	movf	??_DCCbitDecode+3,w
  1962  005B  00FB               	movwf	_rawPacketLow+3
  1963  005C  0874               	movf	??_DCCbitDecode+2,w
  1964  005D  00FA               	movwf	_rawPacketLow+2
  1965  005E  0873               	movf	??_DCCbitDecode+1,w
  1966  005F  00F9               	movwf	_rawPacketLow+1
  1967  0060  0872               	movf	??_DCCbitDecode,w
  1968  0061  00F8               	movwf	_rawPacketLow
  1969  0062                     i1l964:
  1970                           
  1971                           ;DCC.c: 30:     if (TMR1Value < 790) {
  1972  0062  3003               	movlw	3
  1973  0063  0271               	subwf	DCCbitDecode@TMR1Value+1,w
  1974  0064  3016               	movlw	22
  1975  0065  1903               	skipnz
  1976  0066  0270               	subwf	DCCbitDecode@TMR1Value,w
  1977  0067  1803               	skipnc
  1978  0068  286A               	goto	u15_21
  1979  0069  286B               	goto	u15_20
  1980  006A                     u15_21:
  1981  006A  287B               	goto	i1l968
  1982  006B                     u15_20:
  1983  006B                     i1l966:
  1984                           
  1985                           ;DCC.c: 31:         rawPacketHigh = rawPacketHigh * 2 + 1;
  1986  006B  087D               	movf	_rawPacketHigh+1,w
  1987  006C  00F3               	movwf	??_DCCbitDecode+1
  1988  006D  087C               	movf	_rawPacketHigh,w
  1989  006E  00F2               	movwf	??_DCCbitDecode
  1990  006F  1003               	clrc
  1991  0070  0DF2               	rlf	??_DCCbitDecode,f
  1992  0071  0DF3               	rlf	??_DCCbitDecode+1,f
  1993  0072  0872               	movf	??_DCCbitDecode,w
  1994  0073  3E01               	addlw	1
  1995  0074  00FC               	movwf	_rawPacketHigh
  1996  0075  0873               	movf	??_DCCbitDecode+1,w
  1997  0076  1803               	skipnc
  1998  0077  3E01               	addlw	1
  1999  0078  3E00               	addlw	0
  2000  0079  00FD               	movwf	_rawPacketHigh+1
  2001                           
  2002                           ;DCC.c: 32:     } else {
  2003  007A  2894               	goto	i1l142
  2004  007B                     i1l968:
  2005                           
  2006                           ;DCC.c: 33:         rawPacketLow = rawPacketLow * 2;
  2007  007B  0878               	movf	_rawPacketLow,w
  2008  007C  00F2               	movwf	??_DCCbitDecode
  2009  007D  0879               	movf	_rawPacketLow+1,w
  2010  007E  00F3               	movwf	??_DCCbitDecode+1
  2011  007F  087A               	movf	_rawPacketLow+2,w
  2012  0080  00F4               	movwf	??_DCCbitDecode+2
  2013  0081  087B               	movf	_rawPacketLow+3,w
  2014  0082  00F5               	movwf	??_DCCbitDecode+3
  2015  0083  3001               	movlw	1
  2016  0084                     u16_25:
  2017  0084  1003               	clrc
  2018  0085  0DF2               	rlf	??_DCCbitDecode,f
  2019  0086  0DF3               	rlf	??_DCCbitDecode+1,f
  2020  0087  0DF4               	rlf	??_DCCbitDecode+2,f
  2021  0088  0DF5               	rlf	??_DCCbitDecode+3,f
  2022  0089                     u16_20:
  2023  0089  3EFF               	addlw	-1
  2024  008A  1D03               	skipz
  2025  008B  2884               	goto	u16_25
  2026  008C  0875               	movf	??_DCCbitDecode+3,w
  2027  008D  00FB               	movwf	_rawPacketLow+3
  2028  008E  0874               	movf	??_DCCbitDecode+2,w
  2029  008F  00FA               	movwf	_rawPacketLow+2
  2030  0090  0873               	movf	??_DCCbitDecode+1,w
  2031  0091  00F9               	movwf	_rawPacketLow+1
  2032  0092  0872               	movf	??_DCCbitDecode,w
  2033  0093  00F8               	movwf	_rawPacketLow
  2034  0094                     i1l142:
  2035  0094  0008               	return
  2036  0095                     __end_of_DCCbitDecode:
  2037  007E                     btemp	set	126	;btemp
  2038  007E                     wtemp0	set	126

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         16
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      14
    BANK0            80     30      40
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _my_isr_routine in COMMON

    _my_isr_routine->_DCCbitDecode

Critical Paths under _main in BANK0

    _main->_DCCisRawPacketValid
    _setup->_CCP2Init
    _DCCisRawPacketValid->_DCCgetAddress

Critical Paths under _my_isr_routine in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _my_isr_routine in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _my_isr_routine in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _my_isr_routine in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0     409
                                             26 BANK0      4     4      0
                      _DCCgetAddress
                     _DCCgetChecksum
                         _DCCgetData
                _DCCisRawPacketValid
                              _setup
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0      22
                           _CCP2Init
              _disableTMR1Intterrupt
             _enableGlobalInterrupts
         _enablePeripheralInterrupts
                           _tmr1Init
 ---------------------------------------------------------------------------------
 (2) _tmr1Init                                             0     0      0       0
                             _tmr1On
                         _tmr1Reload
 ---------------------------------------------------------------------------------
 (3) _tmr1Reload                                           0     0      0       0
              _disableTMR1Intterrupt
               _enableTMR1Intterrupt
 ---------------------------------------------------------------------------------
 (4) _enableTMR1Intterrupt                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _disableTMR1Intterrupt                                0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _tmr1On                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _enablePeripheralInterrupts                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _enableGlobalInterrupts                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _CCP2Init                                             1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DCCisRawPacketValid                                 17    15      2     251
                                              9 BANK0     17    15      2
                      _DCCgetAddress
                     _DCCgetChecksum
                         _DCCgetData
 ---------------------------------------------------------------------------------
 (2) _DCCgetData                                           1     1      0      45
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _DCCgetChecksum                                       3     3      0      23
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _DCCgetAddress                                        9     9      0      68
                                              0 BANK0      9     9      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _my_isr_routine                                       2     2      0      98
                                              6 COMMON     2     2      0
                       _DCCbitDecode
                       i1_tmr1Reload
 ---------------------------------------------------------------------------------
 (6) i1_tmr1Reload                                         0     0      0       0
            i1_disableTMR1Intterrupt
             i1_enableTMR1Intterrupt
 ---------------------------------------------------------------------------------
 (7) i1_enableTMR1Intterrupt                               0     0      0       0
 ---------------------------------------------------------------------------------
 (7) i1_disableTMR1Intterrupt                              0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _DCCbitDecode                                         6     4      2      98
                                              0 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DCCgetAddress
   _DCCgetChecksum
   _DCCgetData
   _DCCisRawPacketValid
     _DCCgetAddress
     _DCCgetChecksum
     _DCCgetData
   _setup
     _CCP2Init
     _disableTMR1Intterrupt
     _enableGlobalInterrupts
     _enablePeripheralInterrupts
     _tmr1Init
       _tmr1On
       _tmr1Reload
         _disableTMR1Intterrupt
         _enableTMR1Intterrupt

 _my_isr_routine (ROOT)
   _DCCbitDecode
   i1_tmr1Reload
     i1_disableTMR1Intterrupt
     i1_enableTMR1Intterrupt

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      8       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      36       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     1E      28       5       50.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      36      12        0.0%


Microchip Technology PIC Macro Assembler V2.30 build 20200825195618 
Symbol Table                                                                                   Wed Jan 20 22:12:03 2021

            i1_disableTMR1Intterrupt 01F9                                   l50 00F9  
                                 l39 01A3                                   l80 01B2  
                                 l83 01EC                                   l77 01CF  
                                 l86 01F0                                   l95 01F4  
                                l103 0200                                  l117 01E3  
                                l109 01FE                                  l151 01DA  
                                l154 01E8                                  l148 00F3  
                                l157 0165                                  l900 01ED  
                                l910 01F1                                  l902 01E9  
                                l920 01FD                                  l904 01A4  
                                l912 01C2                                  l922 0141  
                                l906 01A9                                  l914 01C5  
                                l924 015C                                  l940 01D0  
                                l932 01E4                                  l916 01DE  
                                l908 01AC                                  l926 0160  
                                l942 01D9                                  l934 01E4  
                                l918 01FF                                  l950 0191  
                                l928 0164                                  l936 01E7  
                                l952 0196                                  l970 0095  
                                l954 019B                                  l946 0186  
                                l980 00C7                                  l972 009F  
                                l956 01A0                                  l948 018B  
                                l990 00E8                                  l982 00D0  
                                l974 00A0                                  l984 00D6  
                                l992 00ED                                  l976 00AE  
                                l986 00DE                                  l978 00C3  
                                l988 00E3                                  u120 0151  
                                u210 0106                                  u211 0105  
                                u220 0136                                  u125 014C  
                                u221 0135                                  u170 00AE  
                                u171 00AD                                  u180 00C3  
                                u181 00C2                                  u190 00D6  
                                u191 00D5                                 l1010 011A  
                               l1012 0124                                 l1004 00F4  
                               l1014 0136                                 l1006 0106  
                               l1016 0139                                 l1008 0110  
                               i1l45 017F                                 i1l80 01C1  
                               i1l83 01F8                                 i1l86 01FC  
                               _TMR1 000E                 __end_of_DCCbitDecode 0095  
                               _data 0046                                 _main 00F4  
                   __end_of_CCP2Init 01E4                                 btemp 007E  
                               start 000C                  __size_of_DCCgetData 0005  
                              ?_main 0070                                i1l142 0094  
                              i1l800 01F5                                i1l802 01F9  
                              i1l854 01B3                                i1l960 0039  
                              i1l856 01B8                                i1l962 0049  
                              i1l858 01BB                                i1l964 0062  
                              i1l966 006B                                i1l958 0025  
                              i1l968 007B                                i1l996 0166  
                              i1l998 0171                                u20_20 0177  
                              u20_21 0176                                u13_20 0039  
                              u13_21 0038                                u14_20 0057  
                              u14_25 0052                                u15_20 006B  
                              u15_21 006A                                u16_20 0089  
                              u16_25 0084                                _TMR1H 000F  
                              _TMR1L 000E                                _PORTA 0005  
                              _adres 0047               DCCisRawPacketValid@ret 0038  
                              _setup 0186                                pclath 000A  
            ?_enableGlobalInterrupts 0070                                status 0003  
                              wtemp0 007E                __end_of_DCCgetAddress 0166  
          ??i1_disableTMR1Intterrupt 0070                      __initialization 000F  
                       __end_of_main 0141                _disableTMR1Intterrupt 01ED  
                             ??_main 003A                __size_ofi1_tmr1Reload 000F  
                             _CCP2IF 0068                               ?_setup 0070  
     __end_of_enableGlobalInterrupts 0201                               i1l1000 0177  
                             i1l1002 017C                        _dccPacketData 0044  
                     _DCCgetChecksum 01D0                         i1_tmr1Reload 01B3  
                             _tmr1On 01F1                     __end_of_tmr1Init 01D0  
                       ??_DCCgetData 0020                            ?_CCP2Init 0070  
                             saved_w 007E                __size_of_DCCbitDecode 0070  
      __size_of_enableTMR1Intterrupt 0004              __end_of__initialization 0021  
             __end_of_DCCgetChecksum 01DB                   __end_of_DCCgetData 01E9  
                     __pcstackCOMMON 0070               ?_disableTMR1Intterrupt 0070  
                      __end_of_setup 01A4                         _DCCbitDecode 0025  
                         ??_CCP2Init 0020                              ??_setup 0021  
                         __pbssBANK0 003E         __size_of_DCCisRawPacketValid 005F  
                    ?_DCCgetChecksum 0070                       _validRawPacket 003E  
                         __pmaintext 00F4                         CCP2Init@mode 0020  
                         __pintentry 0004                              ?_tmr1On 0070  
__size_of_enablePeripheralInterrupts 0002              __size_of_my_isr_routine 0020  
                          ?_tmr1Init 0070                        _rawPacketHigh 007C  
                  DCCgetChecksum@ret 0022             ??i1_enableTMR1Intterrupt 0070  
                    __size_of_tmr1On 0004                              __ptext1 0186  
                            __ptext2 01C2                              __ptext3 01A4  
                            __ptext4 01E9                              __ptext5 01ED  
                            __ptext6 01F1                              __ptext7 01FD  
                            __ptext8 01FF                              __ptext9 01DB  
                          _T1CONbits 0010                     _dccPacketAddress 0043  
                         _tmr1Reload 01A4                 end_of_initialization 0021  
          DCCisRawPacketValid@expect 0033                           ??_tmr1Init 0020  
             __size_of_DCCgetAddress 0025   __end_of_enablePeripheralInterrupts 01FF  
         _enablePeripheralInterrupts 01FD                    __size_of_CCP2Init 0009  
           ?i1_disableTMR1Intterrupt 0070                          _CCP2CONbits 001D  
            ??_disableTMR1Intterrupt 0020         __end_of_enableTMR1Intterrupt 01ED  
    __size_ofi1_enableTMR1Intterrupt 0004                  _DCCisRawPacketValid 0095  
                     __end_of_tmr1On 01F5                  start_initialization 000F  
                   ??_DCCgetChecksum 0020                       _my_isr_routine 0166  
                        ?_tmr1Reload 0070                 ?_DCCisRawPacketValid 0029  
                      _DCCgetAddress 0141                             ??_tmr1On 0020  
           ??_enableGlobalInterrupts 0020                          __pbssCOMMON 0078  
                          ___latbits 0002                        __pcstackBANK0 0020  
             __end_of_my_isr_routine 0186      __end_ofi1_disableTMR1Intterrupt 01FD  
             i1_enableTMR1Intterrupt 01F5                ??_DCCisRawPacketValid 002B  
                   DCCgetAddress@ret 0028                     DCCgetAddress@val 0024  
                     ?_DCCgetAddress 0070                    __size_of_tmr1Init 000E  
                __size_of_tmr1Reload 000F                             _CCP2Init 01DB  
                    ?_my_isr_routine 0070                         _rawPacketLow 0078  
                     __size_of_setup 001E         ??_enablePeripheralInterrupts 0020  
               _enableTMR1Intterrupt 01E9                    interrupt_function 0004  
                           _PIE1bits 008C                             _PIR1bits 000C  
                           _PIR2bits 000D                DCCbitDecode@TMR1Value 0070  
                      ?i1_tmr1Reload 0070      __size_of_enableGlobalInterrupts 0002  
        ?_enablePeripheralInterrupts 0070                ?_enableTMR1Intterrupt 0070  
                    ??_DCCgetAddress 0020       __size_of_disableTMR1Intterrupt 0004  
      __end_of_disableTMR1Intterrupt 01F1                       ??i1_tmr1Reload 0070  
   __size_ofi1_disableTMR1Intterrupt 0004              _DCCisRawPacketValid$307 0037  
                      ?_DCCbitDecode 0070                           _DCCgetData 01E4  
                           _checksum 0045                             __ptext10 0095  
                           __ptext11 01E4                             __ptext12 01D0  
                           __ptext13 0141                             __ptext14 0166  
                           __ptext15 01B3                             __ptext16 01F5  
                           __ptext17 01F9                             __ptext18 0025  
                       ??_tmr1Reload 0020                        __size_of_main 004D  
                           _tmr1Init 01C2               _enableGlobalInterrupts 01FF  
                     ??_DCCbitDecode 0072                   __end_of_tmr1Reload 01B3  
                  _dccPacketChecksum 0042                           _INTCONbits 000B  
            ?i1_enableTMR1Intterrupt 0070               ??_enableTMR1Intterrupt 0020  
                           intlevel1 0000                     ??_my_isr_routine 0076  
                        ?_DCCgetData 0070       __end_ofi1_enableTMR1Intterrupt 01F9  
        __end_of_DCCisRawPacketValid 00F4                 __end_ofi1_tmr1Reload 01C2  
            __size_of_DCCgetChecksum 000B  
