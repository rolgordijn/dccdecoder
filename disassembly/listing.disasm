Disassembly Listing for wisseldecoder
Generated From:
C:/Users/Rian/MPLABXProjects/wisseldecoder.X/dist/default/production/wisseldecoder.X.production.elf
20-jan-2021 0:05:47

---  C:/Users/Rian/MPLABXProjects/wisseldecoder.X/tmr1.c  -----------------------------------------------
1:             /*
2:              * File:   tmr1.c
3:              * Author: Rian
4:              *
5:              * Created on 19 januari 2021, 21:42
6:              */
7:             
8:             
9:             #include <xc.h>
10:            #include "tmr1.h"
11:            
12:            
13:            void tmr1Init(void){
14:              PIR1bits.TMR1IF	 = 0;
0154  1283     BCF STATUS, 0x5
0155  1303     BCF STATUS, 0x6
0156  100C     BCF PIR1, 0x0
15:              tmr1Reload(); 
0157  120A     BCF PCLATH, 0x4
0158  118A     BCF PCLATH, 0x3
0159  2136     CALL 0x136
015A  120A     BCF PCLATH, 0x4
015B  118A     BCF PCLATH, 0x3
16:              tmr1On();
015C  120A     BCF PCLATH, 0x4
015D  118A     BCF PCLATH, 0x3
015E  2173     CALL 0x173
015F  120A     BCF PCLATH, 0x4
0160  118A     BCF PCLATH, 0x3
17:            };
0161  0008     RETURN
18:            
19:            void tmr1Reload(void){
20:                disableTMR1Intterrupt();
0136  120A     BCF PCLATH, 0x4
0137  118A     BCF PCLATH, 0x3
0138  216F     CALL 0x16F
0139  120A     BCF PCLATH, 0x4
013A  118A     BCF PCLATH, 0x3
0145  120A     BCF PCLATH, 0x4
21:                TMR1H = 0;
013B  1283     BCF STATUS, 0x5
013C  1303     BCF STATUS, 0x6
013D  018F     CLRF TMR1H
014A  1283     BCF STATUS, 0x5
014B  1303     BCF STATUS, 0x6
014C  018F     CLRF TMR1H
22:                TMR1L = 0;
013E  018E     CLRF TMR1
014D  018E     CLRF TMR1
23:                enableTMR1Intterrupt(); 
013F  120A     BCF PCLATH, 0x4
0140  118A     BCF PCLATH, 0x3
0141  216B     CALL 0x16B
0142  120A     BCF PCLATH, 0x4
0143  118A     BCF PCLATH, 0x3
014E  120A     BCF PCLATH, 0x4
014F  118A     BCF PCLATH, 0x3
0150  2177     CALL 0x177
0151  120A     BCF PCLATH, 0x4
0152  118A     BCF PCLATH, 0x3
24:            }; 
0144  0008     RETURN
0153  0008     RETURN
25:            
26:            void enableTMR1Intterrupt(void){
27:                PIE1bits.TMR1IE = 1;
016B  1683     BSF STATUS, 0x5
016C  1303     BCF STATUS, 0x6
016D  140C     BSF PIE1, 0x0
0177  1683     BSF STATUS, 0x5
0178  1303     BCF STATUS, 0x6
0179  140C     BSF PIE1, 0x0
28:            }
016E  0008     RETURN
017A  0008     RETURN
29:            
30:            void disableTMR1Intterrupt(void){
31:                PIE1bits.TMR1IE = 0; 
016F  1683     BSF STATUS, 0x5
0170  1303     BCF STATUS, 0x6
0171  100C     BCF PIE1, 0x0
017B  1683     BSF STATUS, 0x5
017C  1303     BCF STATUS, 0x6
017D  100C     BCF PIE1, 0x0
32:            }
0172  0008     RETURN
017E  0008     RETURN
33:            
34:            void resetTMR1IntterruptFlag(void){
35:                PIR1bits.TMR1IF = 0;
36:                
37:            }
38:            
39:            int tmr1InterruptOccured(void){
40:                return PIR1bits.TMR1IF; 
41:            }
42:            
43:            void tmr1On(void){
44:                T1CONbits.TMR1ON  = 1;
0173  1283     BCF STATUS, 0x5
0174  1303     BCF STATUS, 0x6
0175  1410     BSF T1CON, 0x0
45:            }
0176  0008     RETURN
46:            
47:            void tmr1Off(void){
48:                T1CONbits.TMR1ON  = 0;
49:            }
---  C:/Users/Rian/MPLABXProjects/wisseldecoder.X/main.c  -----------------------------------------------
1:             /*
2:              * File:   main.c
3:              * Author: Rian
4:              *
5:              * Created on 19 januari 2021, 21:31
6:              */
7:             
8:             
9:             #include <xc.h>
10:            #include "interrupts.h"
11:            #include "tmr1.h"
12:            #include "CCP2.h"
13:            #include "dcc.h"
14:            
15:            void setup() {
16:                tmr1Init();
00B8  120A     BCF PCLATH, 0x4
00B9  118A     BCF PCLATH, 0x3
00BA  2154     CALL 0x154
00BB  120A     BCF PCLATH, 0x4
00BC  118A     BCF PCLATH, 0x3
17:                CCP2Init(CCP_MODE_CAPTURE_EVERY_RISING_EDGE);
00BD  3005     MOVLW 0x5
00BE  120A     BCF PCLATH, 0x4
00BF  118A     BCF PCLATH, 0x3
00C0  2162     CALL 0x162
00C1  120A     BCF PCLATH, 0x4
00C2  118A     BCF PCLATH, 0x3
18:                enableGlobalInterrupts();
00C3  120A     BCF PCLATH, 0x4
00C4  118A     BCF PCLATH, 0x3
00C5  2181     CALL 0x181
00C6  120A     BCF PCLATH, 0x4
00C7  118A     BCF PCLATH, 0x3
19:                enablePeripheralInterrupts();
00C8  120A     BCF PCLATH, 0x4
00C9  118A     BCF PCLATH, 0x3
00CA  217F     CALL 0x17F
00CB  120A     BCF PCLATH, 0x4
00CC  118A     BCF PCLATH, 0x3
20:                disableTMR1Intterrupt();
00CD  120A     BCF PCLATH, 0x4
00CE  118A     BCF PCLATH, 0x3
00CF  216F     CALL 0x16F
00D0  120A     BCF PCLATH, 0x4
00D1  118A     BCF PCLATH, 0x3
21:                PIR2bits.CCP2IF = 1 ; 
00D2  1283     BCF STATUS, 0x5
00D3  1303     BCF STATUS, 0x6
00D4  140D     BSF PIR2, 0x0
22:                
23:            
24:            }
00D5  0008     RETURN
25:            
26:                 void __interrupt () my_isr_routine (void) {
0004  00FE     MOVWF 0x7E
27:                     if(PIR2bits.CCP2IF){
0121  1283     BCF STATUS, 0x5
0122  1303     BCF STATUS, 0x6
0123  1C0D     BTFSS PIR2, 0x0
0124  2926     GOTO 0x126
0125  2927     GOTO 0x127
0126  292F     GOTO 0x12F
28:                              tmr1Reload();
0127  120A     BCF PCLATH, 0x4
0128  118A     BCF PCLATH, 0x3
0129  2145     CALL 0x145
012A  120A     BCF PCLATH, 0x4
012B  118A     BCF PCLATH, 0x3
29:                              CCP2IF= 0; 
012C  1283     BCF STATUS, 0x5
012D  1303     BCF STATUS, 0x6
012E  100D     BCF PIR2, 0x0
30:                     }
31:                
32:            
33:            }
012F  0871     MOVF 0x71, W
0130  008A     MOVWF PCLATH
0131  0E70     SWAPF __pcstackCOMMON, W
0132  0083     MOVWF STATUS
0133  0EFE     SWAPF 0x7E, F
0134  0E7E     SWAPF 0x7E, W
34:            
35:            void main(void) {
36:                setup();
006D  120A     BCF PCLATH, 0x4
006E  118A     BCF PCLATH, 0x3
006F  20B8     CALL 0xB8
0070  120A     BCF PCLATH, 0x4
0071  118A     BCF PCLATH, 0x3
37:                
38:                while (1) {
39:                    if (DCCisRawPacketValid()) {
0072  120A     BCF PCLATH, 0x4
0073  118A     BCF PCLATH, 0x3
0074  201F     CALL 0x1F
0075  120A     BCF PCLATH, 0x4
0076  118A     BCF PCLATH, 0x3
0077  0872     MOVF mode, W
0078  0473     IORWF 0x73, W
0079  1903     BTFSC STATUS, 0x2
007A  287C     GOTO 0x7C
007B  287D     GOTO 0x7D
007C  2872     GOTO 0x72
40:                        uint8_t adres = DCCgetAddress();
007D  120A     BCF PCLATH, 0x4
007E  118A     BCF PCLATH, 0x3
007F  2108     CALL 0x108
0080  120A     BCF PCLATH, 0x4
0081  118A     BCF PCLATH, 0x3
0082  1283     BCF STATUS, 0x5
0083  1303     BCF STATUS, 0x6
0084  00AB     MOVWF 0x2B
0085  082B     MOVF 0x2B, W
0086  00AF     MOVWF adres
41:                        uint8_t data = DCCgetData();
0087  120A     BCF PCLATH, 0x4
0088  118A     BCF PCLATH, 0x3
0089  20D6     CALL 0xD6
008A  120A     BCF PCLATH, 0x4
008B  118A     BCF PCLATH, 0x3
008C  1283     BCF STATUS, 0x5
008D  1303     BCF STATUS, 0x6
008E  00AB     MOVWF 0x2B
008F  082B     MOVF 0x2B, W
0090  00B0     MOVWF data
42:                        uint8_t checksum = DCCgetChecksum();
0091  120A     BCF PCLATH, 0x4
0092  118A     BCF PCLATH, 0x3
0093  20EF     CALL 0xEF
0094  120A     BCF PCLATH, 0x4
0095  118A     BCF PCLATH, 0x3
0096  1283     BCF STATUS, 0x5
0097  1303     BCF STATUS, 0x6
0098  00AB     MOVWF 0x2B
0099  082B     MOVF 0x2B, W
009A  00B1     MOVWF checksum
43:            
44:                        if(adres + data - checksum == 1 ){
009B  082F     MOVF adres, W
009C  0730     ADDWF data, W
009D  00AB     MOVWF 0x2B
009E  01AC     CLRF 0x2C
009F  0DAC     RLF 0x2C, F
00A0  082C     MOVF 0x2C, W
00A1  00AE     MOVWF 0x2E
00A2  0831     MOVF checksum, W
00A3  022B     SUBWF 0x2B, W
00A4  00AD     MOVWF 0x2D
00A5  1C03     BTFSS STATUS, 0x0
00A6  03AE     DECF 0x2E, F
00A7  032D     DECF 0x2D, W
00A8  042E     IORWF 0x2E, W
00A9  1D03     BTFSS STATUS, 0x2
00AA  28AC     GOTO 0xAC
00AB  28AD     GOTO 0xAD
00AC  28B0     GOTO 0xB0
45:                            PORTA = 50;
00AD  3032     MOVLW 0x32
00AE  0085     MOVWF PORTA
46:                        }else{
00AF  2872     GOTO 0x72
47:                            PORTA+=5; 
00B0  3005     MOVLW 0x5
00B1  00AB     MOVWF 0x2B
00B2  082B     MOVF 0x2B, W
00B3  0785     ADDWF PORTA, F
00B4  2872     GOTO 0x72
00B5  120A     BCF PCLATH, 0x4
00B6  118A     BCF PCLATH, 0x3
48:                        }
49:                    }
50:                }
51:                return;
52:            }
---  C:/Users/Rian/MPLABXProjects/wisseldecoder.X/interrupts.c  -----------------------------------------
1:             /*
2:              * File:   interrupts.c
3:              * Author: Rian
4:              *
5:              * Created on 19 januari 2021, 22:03
6:              */
7:             
8:             
9:             #include <xc.h>
10:            
11:            void enableGlobalInterrupts(void){
12:                INTCONbits.GIE = 1;
0181  178B     BSF INTCON, 0x7
13:                
14:            };
0182  0008     RETURN
15:            void disableGlobalInterrupts(void){
16:                INTCONbits.GIE = 0;
17:                 
18:            };
19:            
20:            void enablePeripheralInterrupts(void){
21:                INTCONbits.PEIE = 1;   
017F  170B     BSF INTCON, 0x6
22:            };
0180  0008     RETURN
23:            void disablePeripheralInterrupts(void){
24:                INTCONbits.PEIE = 0;
25:            };
---  C:/Users/Rian/MPLABXProjects/wisseldecoder.X/DCC.c  ------------------------------------------------
1:             /*
2:              * File:   DCC.c
3:              * Author: Rian
4:              *
5:              * Created on 19 januari 2021, 22:40
6:              */
7:             
8:             
9:             #include <xc.h>
10:            #include "dcc.h"
11:            #include <stdint.h>
12:            
13:            
14:            uint32_t rawPacketLow;
15:            uint16_t rawPacketHigh;
16:            uint32_t validRawPacket;
17:            
18:            void DCCbitDecode(uint16_t TMR1Value) {
19:                if (rawPacketLow | 0x80000000) {
20:                    rawPacketHigh = rawPacketHigh * 2 + 1;
21:                } else {
22:                    rawPacketLow = rawPacketLow * 2;
23:                }
24:            
25:                if (TMR1Value < 790) {
26:                    rawPacketHigh = rawPacketHigh * 2 + 1;
27:                } else {
28:                    rawPacketLow = rawPacketLow * 2;
29:                }
30:            }
31:            
32:            int DCCisRawPacketValid() {
33:                uint32_t mask = 0xF8040201;
34:                uint32_t expect = 0xF0000000;
001F  30F0     MOVLW 0xF0
0020  1283     BCF STATUS, 0x5
0021  1303     BCF STATUS, 0x6
0022  00A7     MOVWF 0x27
0023  3000     MOVLW 0x0
0024  00A6     MOVWF 0x26
0025  3000     MOVLW 0x0
0026  00A5     MOVWF 0x25
0027  3000     MOVLW 0x0
0028  00A4     MOVWF expect
35:                int ret = (((rawPacketHigh & 0x3FF) == 0x3FF) && ((rawPacketLow & mask) == expect));
0029  01A8     CLRF 0x28
002A  30FF     MOVLW 0xFF
002B  0578     ANDWF rawPacketHigh, W
002C  00F4     MOVWF 0x74
002D  3003     MOVLW 0x3
002E  0579     ANDWF 0x79, W
002F  00F5     MOVWF 0x75
0030  0A74     INCF 0x74, W
0031  3003     MOVLW 0x3
0032  1903     BTFSC STATUS, 0x2
0033  0675     XORWF 0x75, W
0034  1D03     BTFSS STATUS, 0x2
0035  2837     GOTO 0x37
0036  2838     GOTO 0x38
0037  2851     GOTO 0x51
0038  3001     MOVLW 0x1
0039  0536     ANDWF rawPacketLow, W
003A  00F4     MOVWF 0x74
003B  3002     MOVLW 0x2
003C  0537     ANDWF 0x37, W
003D  00F5     MOVWF 0x75
003E  3004     MOVLW 0x4
003F  0538     ANDWF 0x38, W
0040  00F6     MOVWF 0x76
0041  30F8     MOVLW 0xF8
0042  0539     ANDWF 0x39, W
0043  00F7     MOVWF ret
0044  30F0     MOVLW 0xF0
0045  0677     XORWF ret, W
0046  0474     IORWF 0x74, W
0047  0475     IORWF 0x75, W
0048  0476     IORWF 0x76, W
0049  1D03     BTFSS STATUS, 0x2
004A  284C     GOTO 0x4C
004B  284D     GOTO 0x4D
004C  2851     GOTO 0x51
004D  1283     BCF STATUS, 0x5
004E  1303     BCF STATUS, 0x6
004F  01A8     CLRF 0x28
0050  0AA8     INCF 0x28, F
0051  1283     BCF STATUS, 0x5
0052  1303     BCF STATUS, 0x6
0053  0828     MOVF 0x28, W
0054  00F4     MOVWF 0x74
0055  01F5     CLRF 0x75
0056  0874     MOVF 0x74, W
0057  00A9     MOVWF ret
0058  0875     MOVF 0x75, W
0059  00AA     MOVWF 0x2A
36:                if (ret) validRawPacket = rawPacketLow;
005A  0829     MOVF ret, W
005B  042A     IORWF 0x2A, W
005C  1903     BTFSC STATUS, 0x2
005D  285F     GOTO 0x5F
005E  2860     GOTO 0x60
005F  2868     GOTO 0x68
0060  0839     MOVF 0x39, W
0061  00B5     MOVWF 0x35
0062  0838     MOVF 0x38, W
0063  00B4     MOVWF 0x34
0064  0837     MOVF 0x37, W
0065  00B3     MOVWF 0x33
0066  0836     MOVF rawPacketLow, W
0067  00B2     MOVWF validRawPacket
37:                return ret;
0068  082A     MOVF 0x2A, W
0069  00F3     MOVWF 0x73
006A  0829     MOVF ret, W
006B  00F2     MOVWF mode
38:            }
006C  0008     RETURN
39:            
40:            
41:            uint8_t DCCgetChecksum(){
42:                uint8_t  ret = validRawPacket >> 1; 
00EF  1283     BCF STATUS, 0x5
00F0  1303     BCF STATUS, 0x6
00F1  0832     MOVF validRawPacket, W
00F2  00F2     MOVWF mode
00F3  0833     MOVF 0x33, W
00F4  00F3     MOVWF 0x73
00F5  0834     MOVF 0x34, W
00F6  00F4     MOVWF 0x74
00F7  0835     MOVF 0x35, W
00F8  00F5     MOVWF 0x75
00F9  3001     MOVLW 0x1
00FA  1003     BCF STATUS, 0x0
00FB  0CF5     RRF 0x75, F
00FC  0CF4     RRF 0x74, F
00FD  0CF3     RRF 0x73, F
00FE  0CF2     RRF mode, F
00FF  3EFF     ADDLW 0xFF
0100  1D03     BTFSS STATUS, 0x2
0101  28FA     GOTO 0xFA
0102  0872     MOVF mode, W
0103  00F6     MOVWF 0x76
0104  0876     MOVF 0x76, W
0105  00F7     MOVWF ret
43:                return ret;
0106  0877     MOVF ret, W
44:            }
0107  0008     RETURN
45:            
46:            uint8_t DCCgetData(){
47:                uint8_t  ret = validRawPacket >> 10; 
00D6  1283     BCF STATUS, 0x5
00D7  1303     BCF STATUS, 0x6
00D8  0832     MOVF validRawPacket, W
00D9  00F2     MOVWF mode
00DA  0833     MOVF 0x33, W
00DB  00F3     MOVWF 0x73
00DC  0834     MOVF 0x34, W
00DD  00F4     MOVWF 0x74
00DE  0835     MOVF 0x35, W
00DF  00F5     MOVWF 0x75
00E0  300A     MOVLW 0xA
00E1  1003     BCF STATUS, 0x0
00E2  0CF5     RRF 0x75, F
00E3  0CF4     RRF 0x74, F
00E4  0CF3     RRF 0x73, F
00E5  0CF2     RRF mode, F
00E6  3EFF     ADDLW 0xFF
00E7  1D03     BTFSS STATUS, 0x2
00E8  28E1     GOTO 0xE1
00E9  0872     MOVF mode, W
00EA  00F6     MOVWF 0x76
00EB  0876     MOVF 0x76, W
00EC  00F7     MOVWF ret
48:                return ret; 
00ED  0877     MOVF ret, W
49:            }
00EE  0008     RETURN
50:            
51:            uint8_t DCCgetAddress(){
52:                uint8_t  ret = validRawPacket >> 19; 
0108  1283     BCF STATUS, 0x5
0109  1303     BCF STATUS, 0x6
010A  0832     MOVF validRawPacket, W
010B  00F2     MOVWF mode
010C  0833     MOVF 0x33, W
010D  00F3     MOVWF 0x73
010E  0834     MOVF 0x34, W
010F  00F4     MOVWF 0x74
0110  0835     MOVF 0x35, W
0111  00F5     MOVWF 0x75
0112  3013     MOVLW 0x13
0113  1003     BCF STATUS, 0x0
0114  0CF5     RRF 0x75, F
0115  0CF4     RRF 0x74, F
0116  0CF3     RRF 0x73, F
0117  0CF2     RRF mode, F
0118  3EFF     ADDLW 0xFF
0119  1D03     BTFSS STATUS, 0x2
011A  2913     GOTO 0x113
011B  0872     MOVF mode, W
011C  00F6     MOVWF 0x76
011D  0876     MOVF 0x76, W
011E  00F7     MOVWF ret
53:                return ret; 
011F  0877     MOVF ret, W
54:            }
0120  0008     RETURN
---  C:/Users/Rian/MPLABXProjects/wisseldecoder.X/CCP2.c  -----------------------------------------------
1:             /*
2:              * File:   CCP2C.c
3:              * Author: Rian
4:              *
5:              * Created on 19 januari 2021, 22:16
6:              */
7:             
8:             
9:             #include <xc.h>
10:            #include <stdint.h>
11:            
12:            #include "CCP2.h"
13:            
14:            
15:            
16:            
17:            void CCP2Init(uint8_t mode){
0162  00F2     MOVWF mode
18:                CCP2CONbits.CCP2M = mode; 
0163  1283     BCF STATUS, 0x5
0164  1303     BCF STATUS, 0x6
0165  081D     MOVF CCP2CON, W
0166  0672     XORWF mode, W
0167  39F0     ANDLW 0xF0
0168  0672     XORWF mode, W
0169  009D     MOVWF CCP2CON
19:            }
016A  0008     RETURN
---  C:/Users/Rian/AppData/Local/Temp/sec0x.s  ----------------------------------------------------------
000F  01F8     CLRF rawPacketHigh
0010  01F9     CLRF 0x79
0011  1283     BCF STATUS, 0x5
0012  1303     BCF STATUS, 0x6
0013  01B2     CLRF validRawPacket
0014  01B3     CLRF 0x33
0015  01B4     CLRF 0x34
0016  01B5     CLRF 0x35
0017  01B6     CLRF rawPacketLow
0018  01B7     CLRF 0x37
0019  01B8     CLRF 0x38
001A  01B9     CLRF 0x39
001B  0183     CLRF STATUS
001C  120A     BCF PCLATH, 0x4
